
PS_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b9e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00001b9e  00001c52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  008000fc  008000fc  00001cee  2**0
                  ALLOC
  3 .eeprom       0000000f  00810000  00810000  00001cee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000028c8  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000c6b  00000000  00000000  000045c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00005233  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000000e8  00000000  00000000  00005262  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002406  00000000  00000000  0000534a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000328  00000000  00000000  00007750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000083c  00000000  00000000  00007a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002e8  00000000  00000000  000082b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000005f3  00000000  00000000  0000859c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000013a0  00000000  00000000  00008b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d8  00000000  00000000  00009f2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 46 08 	jmp	0x108c	; 0x108c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 08 	call	0x114e	; 0x114e <main>
      8a:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sendToLcd>:
	I2C_StartWait(DS1307_ADDR | I2C_WRITE);
	I2C_Write(0x00);//stop oscillator
	I2C_Write(DS1307_DECtoBCD(second));
	I2C_Write(DS1307_DECtoBCD(minute));
	I2C_Write(DS1307_DECtoBCD(hour));
	I2C_Write(DS1307_DECtoBCD(dayofweek));
      92:	ef e9       	ldi	r30, 0x9F	; 159
      94:	ff e0       	ldi	r31, 0x0F	; 15
	I2C_Write(DS1307_DECtoBCD(day));
      96:	31 97       	sbiw	r30, 0x01	; 1
      98:	f1 f7       	brne	.-4      	; 0x96 <sendToLcd+0x4>
      9a:	00 c0       	rjmp	.+0      	; 0x9c <sendToLcd+0xa>
      9c:	00 00       	nop
      9e:	81 11       	cpse	r24, r1
	I2C_Write(DS1307_DECtoBCD(month));
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <sendToLcd+0x14>
      a2:	aa 98       	cbi	0x15, 2	; 21
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <sendToLcd+0x16>
      a6:	aa 9a       	sbi	0x15, 2	; 21
      a8:	61 11       	cpse	r22, r1
	I2C_Write(DS1307_DECtoBCD(year));
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <sendToLcd+0x1e>
      ac:	ab 98       	cbi	0x15, 3	; 21
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <sendToLcd+0x20>
      b0:	ab 9a       	sbi	0x15, 3	; 21
      b2:	42 bb       	out	0x12, r20	; 18
	I2C_Write(0x00); //start oscillator
      b4:	ac 9a       	sbi	0x15, 4	; 21
      b6:	8f e1       	ldi	r24, 0x1F	; 31
      b8:	9e e4       	ldi	r25, 0x4E	; 78
	I2C_Stop();
      ba:	01 97       	sbiw	r24, 0x01	; 1
      bc:	f1 f7       	brne	.-4      	; 0xba <sendToLcd+0x28>
	
	return 0;
      be:	00 c0       	rjmp	.+0      	; 0xc0 <sendToLcd+0x2e>
      c0:	00 00       	nop
	minute < 0 || minute > 59 ||
	hour < 0 || hour > 23 ||
	day < 1 || day > 31 ||
	month < 1 || month > 12 ||
	year < 0 || year > 99)
	return 8;
      c2:	ac 98       	cbi	0x15, 4	; 21
      c4:	08 95       	ret

000000c6 <sendStringToLcd>:
      c6:	1f 93       	push	r17
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	ec 01       	movw	r28, r24
      ce:	48 81       	ld	r20, Y
      d0:	44 23       	and	r20, r20
      d2:	61 f0       	breq	.+24     	; 0xec <sendStringToLcd+0x26>
      d4:	10 e0       	ldi	r17, 0x00	; 0
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
      de:	1f 5f       	subi	r17, 0xFF	; 255
      e0:	fe 01       	movw	r30, r28

	//sanitize day based on month
	if(day > pgm_read_byte(DS1307_daysInMonth + month - 1))
	return 0;
      e2:	e1 0f       	add	r30, r17
	I2C_Write(DS1307_DECtoBCD(year));
	I2C_Write(0x00); //start oscillator
	I2C_Stop();
	
	return 0;
}
      e4:	f1 1d       	adc	r31, r1
      e6:	40 81       	ld	r20, Z
      e8:	41 11       	cpse	r20, r1
      ea:	f5 cf       	rjmp	.-22     	; 0xd6 <sendStringToLcd+0x10>
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	1f 91       	pop	r17
      f2:	08 95       	ret

000000f4 <SendDigitsToLcd>:
	{
		sendToLcd(DATA, WRITE, stringToSend[i]);
	}
}
void SendDigitsToLcd(int i, uint8_t address)
{
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	00 d0       	rcall	.+0      	; 0xfa <SendDigitsToLcd+0x6>
      fa:	00 d0       	rcall	.+0      	; 0xfc <SendDigitsToLcd+0x8>
      fc:	1f 92       	push	r1
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	46 2f       	mov	r20, r22
	char digits[5];
	digits[0] = (i/1000) + 0x30;
     104:	68 ee       	ldi	r22, 0xE8	; 232
     106:	73 e0       	ldi	r23, 0x03	; 3
     108:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
     10c:	60 5d       	subi	r22, 0xD0	; 208
     10e:	69 83       	std	Y+1, r22	; 0x01
	int garbage = i%1000;
	digits[1] = (garbage/100) + 0x30;
     110:	64 e6       	ldi	r22, 0x64	; 100
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
     118:	60 5d       	subi	r22, 0xD0	; 208
     11a:	6a 83       	std	Y+2, r22	; 0x02
	
	garbage = garbage%100;
	digits[2] = (garbage/10) + 0x30;
     11c:	6a e0       	ldi	r22, 0x0A	; 10
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
     124:	60 5d       	subi	r22, 0xD0	; 208
     126:	6b 83       	std	Y+3, r22	; 0x03
	
	garbage = garbage%10;
	digits[3] = garbage + 0x30;
     128:	80 5d       	subi	r24, 0xD0	; 208
     12a:	8c 83       	std	Y+4, r24	; 0x04
	digits[4] = '\0';
     12c:	1d 82       	std	Y+5, r1	; 0x05
	
	sendToLcd(COMMAND, WRITE, address);
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	sendStringToLcd(digits);
     136:	ce 01       	movw	r24, r28
     138:	01 96       	adiw	r24, 0x01	; 1
     13a:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
}
     13e:	0f 90       	pop	r0
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <convertAndSend>:
void convertAndSend(float floatValue)
{
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	6b 01       	movw	r12, r22
     15c:	7c 01       	movw	r14, r24
	char intPart = (char) floatValue;
     15e:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fixunssfsi>
     162:	c6 2f       	mov	r28, r22
	
	int decPart = (((int) ( floatValue * 10 )) % 10 );
	
	char intPartDigits[2] = { (intPart/10 + 0x30) , (intPart%10 + 0x30) };
     164:	dd ec       	ldi	r29, 0xCD	; 205
     166:	6d 9f       	mul	r22, r29
     168:	d1 2d       	mov	r29, r1
     16a:	11 24       	eor	r1, r1
     16c:	d6 95       	lsr	r29
     16e:	d6 95       	lsr	r29
     170:	d6 95       	lsr	r29
     172:	4d 2f       	mov	r20, r29
     174:	40 5d       	subi	r20, 0xD0	; 208
	char decPartDigit = (decPart + 0x30);
	
	sendToLcd(DATA,WRITE,intPartDigits[0]);
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
{
	char intPart = (char) floatValue;
	
	int decPart = (((int) ( floatValue * 10 )) % 10 );
	
	char intPartDigits[2] = { (intPart/10 + 0x30) , (intPart%10 + 0x30) };
     17e:	dd 0f       	add	r29, r29
     180:	8d 2f       	mov	r24, r29
     182:	88 0f       	add	r24, r24
     184:	88 0f       	add	r24, r24
     186:	d8 0f       	add	r29, r24
     188:	cd 1b       	sub	r28, r29
     18a:	4c 2f       	mov	r20, r28
     18c:	40 5d       	subi	r20, 0xD0	; 208
	char decPartDigit = (decPart + 0x30);
	
	sendToLcd(DATA,WRITE,intPartDigits[0]);
	sendToLcd(DATA,WRITE,intPartDigits[1]);
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	sendToLcd(DATA, WRITE, 0x2E); //decimal point
     196:	4e e2       	ldi	r20, 0x2E	; 46
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
}
void convertAndSend(float floatValue)
{
	char intPart = (char) floatValue;
	
	int decPart = (((int) ( floatValue * 10 )) % 10 );
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e2       	ldi	r20, 0x20	; 32
     1a6:	51 e4       	ldi	r21, 0x41	; 65
     1a8:	c7 01       	movw	r24, r14
     1aa:	b6 01       	movw	r22, r12
     1ac:	0e 94 ef 0c 	call	0x19de	; 0x19de <__mulsf3>
     1b0:	0e 94 08 0c 	call	0x1810	; 0x1810 <__fixsfsi>
     1b4:	cb 01       	movw	r24, r22
     1b6:	6a e0       	ldi	r22, 0x0A	; 10
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
	
	char intPartDigits[2] = { (intPart/10 + 0x30) , (intPart%10 + 0x30) };
	char decPartDigit = (decPart + 0x30);
     1be:	48 2f       	mov	r20, r24
     1c0:	40 5d       	subi	r20, 0xD0	; 208
	
	sendToLcd(DATA,WRITE,intPartDigits[0]);
	sendToLcd(DATA,WRITE,intPartDigits[1]);
	sendToLcd(DATA, WRITE, 0x2E); //decimal point
	sendToLcd(DATA,WRITE,decPartDigit);
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
}
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	df 90       	pop	r13
     1d4:	cf 90       	pop	r12
     1d6:	08 95       	ret

000001d8 <displayTime>:
	digits[a] = garbage + 0x30;
	sendToLcd(COMMAND, WRITE, address);
	sendStringToLcd(digits);
}
void displayTime(uint8_t i,uint8_t address)
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	00 d0       	rcall	.+0      	; 0x1de <displayTime+0x6>
     1de:	1f 92       	push	r1
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	46 2f       	mov	r20, r22
	//uint8_t garbage = i;
	char digits[3] = {(i/10) + 0x30,(i%10) + 0x30,'\0'};
     1e6:	9d ec       	ldi	r25, 0xCD	; 205
     1e8:	89 9f       	mul	r24, r25
     1ea:	91 2d       	mov	r25, r1
     1ec:	11 24       	eor	r1, r1
     1ee:	96 95       	lsr	r25
     1f0:	96 95       	lsr	r25
     1f2:	96 95       	lsr	r25
     1f4:	29 2f       	mov	r18, r25
     1f6:	20 5d       	subi	r18, 0xD0	; 208
     1f8:	29 83       	std	Y+1, r18	; 0x01
     1fa:	99 0f       	add	r25, r25
     1fc:	29 2f       	mov	r18, r25
     1fe:	22 0f       	add	r18, r18
     200:	22 0f       	add	r18, r18
     202:	92 0f       	add	r25, r18
     204:	89 1b       	sub	r24, r25
     206:	80 5d       	subi	r24, 0xD0	; 208
     208:	8a 83       	std	Y+2, r24	; 0x02
     20a:	1b 82       	std	Y+3, r1	; 0x03
	sendToLcd(COMMAND,WRITE,address);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	sendStringToLcd(digits);
     214:	ce 01       	movw	r24, r28
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
}
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <keyboardFunction>:
#ifndef KEYPADFUNCTION_H_
#define KEYPADFUNCTION_H_

void keyboardFunction(void)
{
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	2a 97       	sbiw	r28, 0x0a	; 10
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
	digitBlinkFlag = 1;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	80 93 fc 00 	sts	0x00FC, r24
	uint8_t digitPlace = 0;
	char passwordToEnter[5]={0x30,0x30,0x30,0x30,'\0'};
     24e:	85 e0       	ldi	r24, 0x05	; 5
     250:	e9 e6       	ldi	r30, 0x69	; 105
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	de 01       	movw	r26, r28
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	8a 95       	dec	r24
     25e:	e1 f7       	brne	.-8      	; 0x258 <keyboardFunction+0x30>
	flagWritten=0;
     260:	10 92 0e 01 	sts	0x010E, r1
	sendToLcd(COMMAND, WRITE, 0x01);
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	sendToLcd(COMMAND,WRITE,0x80);
     26e:	40 e8       	ldi	r20, 0x80	; 128
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	sendStringToLcd("PASSWORD");
     278:	8a ec       	ldi	r24, 0xCA	; 202
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
	sendToLcd(COMMAND, WRITE, 0xC0);
     280:	40 ec       	ldi	r20, 0xC0	; 192
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	//sendStringToLcd("0000");
	sendStringToLcd(passwordToEnter);
     28a:	ce 01       	movw	r24, r28
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     292:	2f ef       	ldi	r18, 0xFF	; 255
     294:	89 e6       	ldi	r24, 0x69	; 105
     296:	98 e1       	ldi	r25, 0x18	; 24
     298:	21 50       	subi	r18, 0x01	; 1
     29a:	80 40       	sbci	r24, 0x00	; 0
     29c:	90 40       	sbci	r25, 0x00	; 0
     29e:	e1 f7       	brne	.-8      	; 0x298 <keyboardFunction+0x70>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <keyboardFunction+0x7a>
     2a2:	00 00       	nop
#define KEYPADFUNCTION_H_

void keyboardFunction(void)
{
	digitBlinkFlag = 1;
	uint8_t digitPlace = 0;
     2a4:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(1000);
	
	
	while (1)
	{
		if ((digitBlinkCount % 2) == 0)
     2a6:	80 91 fd 00 	lds	r24, 0x00FD
     2aa:	80 fd       	sbrc	r24, 0
     2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <keyboardFunction+0x9c>
		{
			sendToLcd(COMMAND,WRITE,(0xC0 + digitPlace));
     2ae:	41 2f       	mov	r20, r17
     2b0:	40 54       	subi	r20, 0x40	; 64
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
			sendStringToLcd(" ");
     2ba:	8c ed       	ldi	r24, 0xDC	; 220
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
     2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <keyboardFunction+0xae>
		}
		
		else
		{
			sendToLcd(COMMAND,WRITE,0xC0);
     2c4:	40 ec       	ldi	r20, 0xC0	; 192
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
			sendStringToLcd(passwordToEnter);
     2ce:	ce 01       	movw	r24, r28
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
		}
		
		if ((READBIT(PINA,UP)) == 0)
     2d6:	ce 99       	sbic	0x19, 6	; 25
     2d8:	24 c0       	rjmp	.+72     	; 0x322 <keyboardFunction+0xfa>
     2da:	8f e3       	ldi	r24, 0x3F	; 63
     2dc:	9c e9       	ldi	r25, 0x9C	; 156
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <keyboardFunction+0xb6>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <keyboardFunction+0xbc>
     2e4:	00 00       	nop
		{
			_delay_ms(DEBOUNCE_VALUE);
			if ((READBIT(PINA,UP)) == 0)
     2e6:	ce 99       	sbic	0x19, 6	; 25
     2e8:	1c c0       	rjmp	.+56     	; 0x322 <keyboardFunction+0xfa>
			{
				if ((passwordToEnter[digitPlace]) < (9 + 0x30))
     2ea:	81 2f       	mov	r24, r17
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	e1 e0       	ldi	r30, 0x01	; 1
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	ec 0f       	add	r30, r28
     2f4:	fd 1f       	adc	r31, r29
     2f6:	e8 0f       	add	r30, r24
     2f8:	f9 1f       	adc	r31, r25
     2fa:	20 81       	ld	r18, Z
     2fc:	29 33       	cpi	r18, 0x39	; 57
     2fe:	40 f4       	brcc	.+16     	; 0x310 <keyboardFunction+0xe8>
				{
					passwordToEnter[digitPlace] += 1;
     300:	e1 e0       	ldi	r30, 0x01	; 1
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	ec 0f       	add	r30, r28
     306:	fd 1f       	adc	r31, r29
     308:	e8 0f       	add	r30, r24
     30a:	f9 1f       	adc	r31, r25
     30c:	2f 5f       	subi	r18, 0xFF	; 255
     30e:	20 83       	st	Z, r18
				}
				
				sendToLcd(COMMAND,WRITE,0xC0);
     310:	40 ec       	ldi	r20, 0xC0	; 192
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
				sendStringToLcd(passwordToEnter);
     31a:	ce 01       	movw	r24, r28
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
			}
		}
		
		if ((READBIT(PINA,DOWN)) == 0)
     322:	cf 99       	sbic	0x19, 7	; 25
     324:	24 c0       	rjmp	.+72     	; 0x36e <keyboardFunction+0x146>
     326:	8f e3       	ldi	r24, 0x3F	; 63
     328:	9c e9       	ldi	r25, 0x9C	; 156
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <keyboardFunction+0x102>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <keyboardFunction+0x108>
     330:	00 00       	nop
		{
			_delay_ms(DEBOUNCE_VALUE);
			if ((READBIT(PINA,DOWN)) == 0)
     332:	cf 99       	sbic	0x19, 7	; 25
     334:	1c c0       	rjmp	.+56     	; 0x36e <keyboardFunction+0x146>
			{
				if (passwordToEnter[digitPlace] > (0x30))
     336:	81 2f       	mov	r24, r17
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	e1 e0       	ldi	r30, 0x01	; 1
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	ec 0f       	add	r30, r28
     340:	fd 1f       	adc	r31, r29
     342:	e8 0f       	add	r30, r24
     344:	f9 1f       	adc	r31, r25
     346:	20 81       	ld	r18, Z
     348:	21 33       	cpi	r18, 0x31	; 49
     34a:	40 f0       	brcs	.+16     	; 0x35c <keyboardFunction+0x134>
				{
					passwordToEnter[digitPlace] -= 1;
     34c:	e1 e0       	ldi	r30, 0x01	; 1
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	ec 0f       	add	r30, r28
     352:	fd 1f       	adc	r31, r29
     354:	e8 0f       	add	r30, r24
     356:	f9 1f       	adc	r31, r25
     358:	21 50       	subi	r18, 0x01	; 1
     35a:	20 83       	st	Z, r18
				}
				
				sendToLcd(COMMAND, WRITE, 0xC0);
     35c:	40 ec       	ldi	r20, 0xC0	; 192
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
				sendStringToLcd(passwordToEnter);
     366:	ce 01       	movw	r24, r28
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
			}
		}
		if ((READBIT(PINA,SET)) == 0 )
     36e:	cd 99       	sbic	0x19, 5	; 25
     370:	9a cf       	rjmp	.-204    	; 0x2a6 <keyboardFunction+0x7e>
     372:	8f e3       	ldi	r24, 0x3F	; 63
     374:	9c e9       	ldi	r25, 0x9C	; 156
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <keyboardFunction+0x14e>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <keyboardFunction+0x154>
     37c:	00 00       	nop
		{
			_delay_ms(DEBOUNCE_VALUE);
			if (READBIT(PINA,SET) == 0)
     37e:	cd 99       	sbic	0x19, 5	; 25
     380:	92 cf       	rjmp	.-220    	; 0x2a6 <keyboardFunction+0x7e>
			{
				while((READBIT(PINA,SET)) == 0);
     382:	cd 9b       	sbis	0x19, 5	; 25
     384:	fe cf       	rjmp	.-4      	; 0x382 <keyboardFunction+0x15a>
				if (digitPlace < 3)
     386:	13 30       	cpi	r17, 0x03	; 3
     388:	10 f4       	brcc	.+4      	; 0x38e <keyboardFunction+0x166>
				{
					digitPlace += 1;
     38a:	1f 5f       	subi	r17, 0xFF	; 255
     38c:	8c cf       	rjmp	.-232    	; 0x2a6 <keyboardFunction+0x7e>
				}
				
				else
				{
					password = 1000*(passwordToEnter[0] - 0X30) + 100*(passwordToEnter[1] - 0X30) +
     38e:	49 81       	ldd	r20, Y+1	; 0x01
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	40 53       	subi	r20, 0x30	; 48
     394:	51 09       	sbc	r21, r1
     396:	88 ee       	ldi	r24, 0xE8	; 232
     398:	93 e0       	ldi	r25, 0x03	; 3
     39a:	48 9f       	mul	r20, r24
     39c:	90 01       	movw	r18, r0
     39e:	49 9f       	mul	r20, r25
     3a0:	30 0d       	add	r19, r0
     3a2:	58 9f       	mul	r21, r24
     3a4:	30 0d       	add	r19, r0
     3a6:	11 24       	eor	r1, r1
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	94 e6       	ldi	r25, 0x64	; 100
     3ac:	89 9f       	mul	r24, r25
     3ae:	20 0d       	add	r18, r0
     3b0:	31 1d       	adc	r19, r1
     3b2:	11 24       	eor	r1, r1
					10*(passwordToEnter[2]  - 0X30) + (passwordToEnter[3] - 0X30);
     3b4:	8b 81       	ldd	r24, Y+3	; 0x03
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	ac 01       	movw	r20, r24
     3be:	44 0f       	add	r20, r20
     3c0:	55 1f       	adc	r21, r21
     3c2:	44 0f       	add	r20, r20
     3c4:	55 1f       	adc	r21, r21
     3c6:	84 0f       	add	r24, r20
     3c8:	95 1f       	adc	r25, r21
     3ca:	82 0f       	add	r24, r18
     3cc:	93 1f       	adc	r25, r19
     3ce:	2c 81       	ldd	r18, Y+4	; 0x04
     3d0:	82 0f       	add	r24, r18
     3d2:	91 1d       	adc	r25, r1
     3d4:	80 5d       	subi	r24, 0xD0	; 208
     3d6:	94 41       	sbci	r25, 0x14	; 20
					digitPlace += 1;
				}
				
				else
				{
					password = 1000*(passwordToEnter[0] - 0X30) + 100*(passwordToEnter[1] - 0X30) +
     3d8:	90 93 10 01 	sts	0x0110, r25
     3dc:	80 93 0f 01 	sts	0x010F, r24
					10*(passwordToEnter[2]  - 0X30) + (passwordToEnter[3] - 0X30);
					if (password == presetPassword)
     3e0:	20 91 fe 00 	lds	r18, 0x00FE
     3e4:	30 91 ff 00 	lds	r19, 0x00FF
     3e8:	82 17       	cp	r24, r18
     3ea:	93 07       	cpc	r25, r19
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <keyboardFunction+0x1c8>
     3ee:	4b c5       	rjmp	.+2710   	; 0xe86 <__stack+0xa27>
					{
						sendToLcd(COMMAND,WRITE,0x01);
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
						sendToLcd(COMMAND,WRITE,0x80);
     3fa:	40 e8       	ldi	r20, 0x80	; 128
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
						//-----------------------------------------------------PASSWORD DONE----------------------------------------------
						sendStringToLcd("WELCOME!..");
     404:	8e e6       	ldi	r24, 0x6E	; 110
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
     40c:	2f ef       	ldi	r18, 0xFF	; 255
     40e:	84 e3       	ldi	r24, 0x34	; 52
     410:	9c e0       	ldi	r25, 0x0C	; 12
     412:	21 50       	subi	r18, 0x01	; 1
     414:	80 40       	sbci	r24, 0x00	; 0
     416:	90 40       	sbci	r25, 0x00	; 0
     418:	e1 f7       	brne	.-8      	; 0x412 <keyboardFunction+0x1ea>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <keyboardFunction+0x1f4>
     41c:	00 00       	nop
						_delay_ms(500);
						//sendToLcd(COMMAND,WRITE,0x01);
						sendToLcd(COMMAND,WRITE,0X80);
     41e:	40 e8       	ldi	r20, 0x80	; 128
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
						sendStringToLcd("SET LINE PRESSURE:");
     428:	89 e7       	ldi	r24, 0x79	; 121
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
						sendToLcd(COMMAND,WRITE,0XC0);
     430:	40 ec       	ldi	r20, 0xC0	; 192
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
						convertAndSend(defaultPressure);
     43a:	60 91 65 00 	lds	r22, 0x0065
     43e:	70 91 66 00 	lds	r23, 0x0066
     442:	80 91 67 00 	lds	r24, 0x0067
     446:	90 91 68 00 	lds	r25, 0x0068
     44a:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
						sendToLcd(COMMAND,WRITE,0xC6);
     44e:	46 ec       	ldi	r20, 0xC6	; 198
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
						sendStringToLcd("Bar");
     458:	8c ee       	ldi	r24, 0xEC	; 236
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
						digitPlace = 0;
     460:	10 e0       	ldi	r17, 0x00	; 0
						//defPresSet = defaultPressure;
						while(1)
						{
							if ((digitBlinkCount % 2) == 0)
     462:	80 91 fd 00 	lds	r24, 0x00FD
     466:	80 fd       	sbrc	r24, 0
     468:	13 c0       	rjmp	.+38     	; 0x490 <__stack+0x31>
							{
								if(digitPlace!=2) sendToLcd(COMMAND,WRITE,(0xC0 + digitPlace));
     46a:	12 30       	cpi	r17, 0x02	; 2
     46c:	39 f0       	breq	.+14     	; 0x47c <__stack+0x1d>
     46e:	41 2f       	mov	r20, r17
     470:	40 54       	subi	r20, 0x40	; 64
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
     47a:	05 c0       	rjmp	.+10     	; 0x486 <__stack+0x27>
								else sendToLcd(COMMAND,WRITE,(0xC0 + digitPlace + 1));
     47c:	43 ec       	ldi	r20, 0xC3	; 195
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
								sendStringToLcd(" ");
     486:	8c ed       	ldi	r24, 0xDC	; 220
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
     48e:	0f c0       	rjmp	.+30     	; 0x4ae <__stack+0x4f>
							}
							
							else
							{
								sendToLcd(COMMAND,WRITE,0xC0);
     490:	40 ec       	ldi	r20, 0xC0	; 192
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
								convertAndSend(defPresSet);
     49a:	60 91 21 01 	lds	r22, 0x0121
     49e:	70 91 22 01 	lds	r23, 0x0122
     4a2:	80 91 23 01 	lds	r24, 0x0123
     4a6:	90 91 24 01 	lds	r25, 0x0124
     4aa:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
							}
							if ((READBIT(PINA,UP)) == 0)
     4ae:	ce 99       	sbic	0x19, 6	; 25
     4b0:	85 c0       	rjmp	.+266    	; 0x5bc <__stack+0x15d>
     4b2:	8f e3       	ldi	r24, 0x3F	; 63
     4b4:	9c e9       	ldi	r25, 0x9C	; 156
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__stack+0x57>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__stack+0x5d>
     4bc:	00 00       	nop
							{
								_delay_ms(DEBOUNCE_VALUE);
								if ((READBIT(PINA,UP)) == 0)
     4be:	ce 99       	sbic	0x19, 6	; 25
     4c0:	7d c0       	rjmp	.+250    	; 0x5bc <__stack+0x15d>
								{
									switch (digitPlace)
     4c2:	11 30       	cpi	r17, 0x01	; 1
     4c4:	39 f1       	breq	.+78     	; 0x514 <__stack+0xb5>
     4c6:	20 f0       	brcs	.+8      	; 0x4d0 <__stack+0x71>
     4c8:	12 30       	cpi	r17, 0x02	; 2
     4ca:	09 f0       	breq	.+2      	; 0x4ce <__stack+0x6f>
     4cc:	68 c0       	rjmp	.+208    	; 0x59e <__stack+0x13f>
     4ce:	45 c0       	rjmp	.+138    	; 0x55a <__stack+0xfb>
									{
										case 0:
										if(defPresSet==0) defPresSet += 10;
     4d0:	c0 90 21 01 	lds	r12, 0x0121
     4d4:	d0 90 22 01 	lds	r13, 0x0122
     4d8:	e0 90 23 01 	lds	r14, 0x0123
     4dc:	f0 90 24 01 	lds	r15, 0x0124
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	a9 01       	movw	r20, r18
     4e6:	c7 01       	movw	r24, r14
     4e8:	b6 01       	movw	r22, r12
     4ea:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     4ee:	81 11       	cpse	r24, r1
     4f0:	56 c0       	rjmp	.+172    	; 0x59e <__stack+0x13f>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e2       	ldi	r20, 0x20	; 32
     4f8:	51 e4       	ldi	r21, 0x41	; 65
     4fa:	c7 01       	movw	r24, r14
     4fc:	b6 01       	movw	r22, r12
     4fe:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
     502:	60 93 21 01 	sts	0x0121, r22
     506:	70 93 22 01 	sts	0x0122, r23
     50a:	80 93 23 01 	sts	0x0123, r24
     50e:	90 93 24 01 	sts	0x0124, r25
     512:	45 c0       	rjmp	.+138    	; 0x59e <__stack+0x13f>
										break;
										
										case 1:
										if (defPresSet <= 9)
     514:	c0 90 21 01 	lds	r12, 0x0121
     518:	d0 90 22 01 	lds	r13, 0x0122
     51c:	e0 90 23 01 	lds	r14, 0x0123
     520:	f0 90 24 01 	lds	r15, 0x0124
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e1       	ldi	r20, 0x10	; 16
     52a:	51 e4       	ldi	r21, 0x41	; 65
     52c:	c7 01       	movw	r24, r14
     52e:	b6 01       	movw	r22, r12
     530:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     534:	18 16       	cp	r1, r24
     536:	9c f1       	brlt	.+102    	; 0x59e <__stack+0x13f>
										{
											defPresSet += 1;
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e8       	ldi	r20, 0x80	; 128
     53e:	5f e3       	ldi	r21, 0x3F	; 63
     540:	c7 01       	movw	r24, r14
     542:	b6 01       	movw	r22, r12
     544:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
     548:	60 93 21 01 	sts	0x0121, r22
     54c:	70 93 22 01 	sts	0x0122, r23
     550:	80 93 23 01 	sts	0x0123, r24
     554:	90 93 24 01 	sts	0x0124, r25
     558:	22 c0       	rjmp	.+68     	; 0x59e <__stack+0x13f>
										}
										break;
										
										case 2:
										if (defPresSet < 10)
     55a:	c0 90 21 01 	lds	r12, 0x0121
     55e:	d0 90 22 01 	lds	r13, 0x0122
     562:	e0 90 23 01 	lds	r14, 0x0123
     566:	f0 90 24 01 	lds	r15, 0x0124
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e2       	ldi	r20, 0x20	; 32
     570:	51 e4       	ldi	r21, 0x41	; 65
     572:	c7 01       	movw	r24, r14
     574:	b6 01       	movw	r22, r12
     576:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     57a:	88 23       	and	r24, r24
     57c:	84 f4       	brge	.+32     	; 0x59e <__stack+0x13f>
										{
											defPresSet += 0.1;
     57e:	2d ec       	ldi	r18, 0xCD	; 205
     580:	3c ec       	ldi	r19, 0xCC	; 204
     582:	4c ec       	ldi	r20, 0xCC	; 204
     584:	5d e3       	ldi	r21, 0x3D	; 61
     586:	c7 01       	movw	r24, r14
     588:	b6 01       	movw	r22, r12
     58a:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
     58e:	60 93 21 01 	sts	0x0121, r22
     592:	70 93 22 01 	sts	0x0122, r23
     596:	80 93 23 01 	sts	0x0123, r24
     59a:	90 93 24 01 	sts	0x0124, r25
										}
										break;
									}
									sendToLcd(COMMAND,WRITE,0xC0);
     59e:	40 ec       	ldi	r20, 0xC0	; 192
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
									convertAndSend(defPresSet);
     5a8:	60 91 21 01 	lds	r22, 0x0121
     5ac:	70 91 22 01 	lds	r23, 0x0122
     5b0:	80 91 23 01 	lds	r24, 0x0123
     5b4:	90 91 24 01 	lds	r25, 0x0124
     5b8:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
								}
							}
							
							if ((READBIT(PINA,DOWN)) == 0)
     5bc:	cf 99       	sbic	0x19, 7	; 25
     5be:	7b c0       	rjmp	.+246    	; 0x6b6 <__stack+0x257>
     5c0:	8f e3       	ldi	r24, 0x3F	; 63
     5c2:	9c e9       	ldi	r25, 0x9C	; 156
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <__stack+0x165>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <__stack+0x16b>
     5ca:	00 00       	nop
							{
								_delay_ms(DEBOUNCE_VALUE);
								if ((READBIT(PINA,DOWN)) == 0)
     5cc:	cf 99       	sbic	0x19, 7	; 25
     5ce:	73 c0       	rjmp	.+230    	; 0x6b6 <__stack+0x257>
								{
									switch (digitPlace)
     5d0:	11 30       	cpi	r17, 0x01	; 1
     5d2:	f1 f0       	breq	.+60     	; 0x610 <__stack+0x1b1>
     5d4:	20 f0       	brcs	.+8      	; 0x5de <__stack+0x17f>
     5d6:	12 30       	cpi	r17, 0x02	; 2
     5d8:	09 f0       	breq	.+2      	; 0x5dc <__stack+0x17d>
     5da:	5e c0       	rjmp	.+188    	; 0x698 <__stack+0x239>
     5dc:	3b c0       	rjmp	.+118    	; 0x654 <__stack+0x1f5>
									{
										case 0:
										if(defPresSet==10) defPresSet -= 10;
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e2       	ldi	r20, 0x20	; 32
     5e4:	51 e4       	ldi	r21, 0x41	; 65
     5e6:	60 91 21 01 	lds	r22, 0x0121
     5ea:	70 91 22 01 	lds	r23, 0x0122
     5ee:	80 91 23 01 	lds	r24, 0x0123
     5f2:	90 91 24 01 	lds	r25, 0x0124
     5f6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     5fa:	81 11       	cpse	r24, r1
     5fc:	4d c0       	rjmp	.+154    	; 0x698 <__stack+0x239>
     5fe:	10 92 21 01 	sts	0x0121, r1
     602:	10 92 22 01 	sts	0x0122, r1
     606:	10 92 23 01 	sts	0x0123, r1
     60a:	10 92 24 01 	sts	0x0124, r1
     60e:	44 c0       	rjmp	.+136    	; 0x698 <__stack+0x239>
										break;
										
										case 1:
										if (defPresSet > 0)
     610:	c0 90 21 01 	lds	r12, 0x0121
     614:	d0 90 22 01 	lds	r13, 0x0122
     618:	e0 90 23 01 	lds	r14, 0x0123
     61c:	f0 90 24 01 	lds	r15, 0x0124
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	a9 01       	movw	r20, r18
     626:	c7 01       	movw	r24, r14
     628:	b6 01       	movw	r22, r12
     62a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__gesf2>
     62e:	18 16       	cp	r1, r24
     630:	9c f5       	brge	.+102    	; 0x698 <__stack+0x239>
										{
											defPresSet -= 1;
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	40 e8       	ldi	r20, 0x80	; 128
     638:	5f e3       	ldi	r21, 0x3F	; 63
     63a:	c7 01       	movw	r24, r14
     63c:	b6 01       	movw	r22, r12
     63e:	0e 94 37 0b 	call	0x166e	; 0x166e <__subsf3>
     642:	60 93 21 01 	sts	0x0121, r22
     646:	70 93 22 01 	sts	0x0122, r23
     64a:	80 93 23 01 	sts	0x0123, r24
     64e:	90 93 24 01 	sts	0x0124, r25
     652:	22 c0       	rjmp	.+68     	; 0x698 <__stack+0x239>
										}
										break;
										
										case 2:
										if (defPresSet > 0.1)
     654:	c0 90 21 01 	lds	r12, 0x0121
     658:	d0 90 22 01 	lds	r13, 0x0122
     65c:	e0 90 23 01 	lds	r14, 0x0123
     660:	f0 90 24 01 	lds	r15, 0x0124
     664:	2d ec       	ldi	r18, 0xCD	; 205
     666:	3c ec       	ldi	r19, 0xCC	; 204
     668:	4c ec       	ldi	r20, 0xCC	; 204
     66a:	5d e3       	ldi	r21, 0x3D	; 61
     66c:	c7 01       	movw	r24, r14
     66e:	b6 01       	movw	r22, r12
     670:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	84 f4       	brge	.+32     	; 0x698 <__stack+0x239>
										{
											defPresSet -= 0.1;
     678:	2d ec       	ldi	r18, 0xCD	; 205
     67a:	3c ec       	ldi	r19, 0xCC	; 204
     67c:	4c ec       	ldi	r20, 0xCC	; 204
     67e:	5d e3       	ldi	r21, 0x3D	; 61
     680:	c7 01       	movw	r24, r14
     682:	b6 01       	movw	r22, r12
     684:	0e 94 37 0b 	call	0x166e	; 0x166e <__subsf3>
     688:	60 93 21 01 	sts	0x0121, r22
     68c:	70 93 22 01 	sts	0x0122, r23
     690:	80 93 23 01 	sts	0x0123, r24
     694:	90 93 24 01 	sts	0x0124, r25
										}
										break;
									}
									
									sendToLcd(COMMAND,WRITE,0xC0);
     698:	40 ec       	ldi	r20, 0xC0	; 192
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
									convertAndSend(defPresSet);
     6a2:	60 91 21 01 	lds	r22, 0x0121
     6a6:	70 91 22 01 	lds	r23, 0x0122
     6aa:	80 91 23 01 	lds	r24, 0x0123
     6ae:	90 91 24 01 	lds	r25, 0x0124
     6b2:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
								}
							}
							
							if ((READBIT(PINA,SET)) == 0)
     6b6:	cd 99       	sbic	0x19, 5	; 25
     6b8:	d4 ce       	rjmp	.-600    	; 0x462 <__stack+0x3>
     6ba:	8f e3       	ldi	r24, 0x3F	; 63
     6bc:	9c e9       	ldi	r25, 0x9C	; 156
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <__stack+0x25f>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <__stack+0x265>
     6c4:	00 00       	nop
							{
								_delay_ms(DEBOUNCE_VALUE);
								if ((READBIT(PINA,SET)) == 0)
     6c6:	cd 99       	sbic	0x19, 5	; 25
     6c8:	cc ce       	rjmp	.-616    	; 0x462 <__stack+0x3>
								{
									while((READBIT(PINA,SET)) == 0);
     6ca:	cd 9b       	sbis	0x19, 5	; 25
     6cc:	fe cf       	rjmp	.-4      	; 0x6ca <__stack+0x26b>
									if (digitPlace < 2)
     6ce:	12 30       	cpi	r17, 0x02	; 2
     6d0:	10 f4       	brcc	.+4      	; 0x6d6 <__stack+0x277>
									{
										digitPlace += 1;
     6d2:	1f 5f       	subi	r17, 0xFF	; 255
     6d4:	c6 ce       	rjmp	.-628    	; 0x462 <__stack+0x3>
									}
									//-----------------------------------------------------------LINE PRESSURE SET------------------------------------------------------------------------------------
									else
									{
										defaultPressure = defPresSet;
     6d6:	80 91 21 01 	lds	r24, 0x0121
     6da:	90 91 22 01 	lds	r25, 0x0122
     6de:	a0 91 23 01 	lds	r26, 0x0123
     6e2:	b0 91 24 01 	lds	r27, 0x0124
     6e6:	80 93 65 00 	sts	0x0065, r24
     6ea:	90 93 66 00 	sts	0x0066, r25
     6ee:	a0 93 67 00 	sts	0x0067, r26
     6f2:	b0 93 68 00 	sts	0x0068, r27
										sendToLcd(COMMAND,WRITE,0x01);
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
										sendToLcd(COMMAND,WRITE,0X80); //sTART AT FIRST LINE
     700:	40 e8       	ldi	r20, 0x80	; 128
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
										sendStringToLcd("SET CUTOFF PRESSURE");
     70a:	8c e8       	ldi	r24, 0x8C	; 140
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
										cli();
     712:	f8 94       	cli
										eeprom_update_float(&eeDefaultPres,defPresSet);
     714:	40 91 21 01 	lds	r20, 0x0121
     718:	50 91 22 01 	lds	r21, 0x0122
     71c:	60 91 23 01 	lds	r22, 0x0123
     720:	70 91 24 01 	lds	r23, 0x0124
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__eeupd_dword_m16a>
										sei();
     72c:	78 94       	sei
										digitPlace = 0;
										sendToLcd(COMMAND,WRITE,0XC0);
     72e:	40 ec       	ldi	r20, 0xC0	; 192
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
										convertAndSend(minPressure);
     738:	60 91 61 00 	lds	r22, 0x0061
     73c:	70 91 62 00 	lds	r23, 0x0062
     740:	80 91 63 00 	lds	r24, 0x0063
     744:	90 91 64 00 	lds	r25, 0x0064
     748:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
										sendToLcd(COMMAND,WRITE,0xC6);
     74c:	46 ec       	ldi	r20, 0xC6	; 198
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
										sendStringToLcd("Bar");
     756:	8c ee       	ldi	r24, 0xEC	; 236
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
										minPresSet = minPressure;
     75e:	80 91 61 00 	lds	r24, 0x0061
     762:	90 91 62 00 	lds	r25, 0x0062
     766:	a0 91 63 00 	lds	r26, 0x0063
     76a:	b0 91 64 00 	lds	r27, 0x0064
     76e:	80 93 1d 01 	sts	0x011D, r24
     772:	90 93 1e 01 	sts	0x011E, r25
     776:	a0 93 1f 01 	sts	0x011F, r26
     77a:	b0 93 20 01 	sts	0x0120, r27
										sendToLcd(COMMAND,WRITE,0X80); //sTART AT FIRST LINE
										sendStringToLcd("SET CUTOFF PRESSURE");
										cli();
										eeprom_update_float(&eeDefaultPres,defPresSet);
										sei();
										digitPlace = 0;
     77e:	10 e0       	ldi	r17, 0x00	; 0
										sendStringToLcd("Bar");
										minPresSet = minPressure;
										
										while(1)
										{
											if ((digitBlinkCount % 2) == 0)
     780:	80 91 fd 00 	lds	r24, 0x00FD
     784:	80 fd       	sbrc	r24, 0
     786:	13 c0       	rjmp	.+38     	; 0x7ae <__stack+0x34f>
											{
												if(digitPlace!=2) sendToLcd(COMMAND,WRITE,(0xC0 + digitPlace));
     788:	12 30       	cpi	r17, 0x02	; 2
     78a:	39 f0       	breq	.+14     	; 0x79a <__stack+0x33b>
     78c:	41 2f       	mov	r20, r17
     78e:	40 54       	subi	r20, 0x40	; 64
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
     798:	05 c0       	rjmp	.+10     	; 0x7a4 <__stack+0x345>
												else sendToLcd(COMMAND,WRITE,(0xC0 + digitPlace + 1));
     79a:	43 ec       	ldi	r20, 0xC3	; 195
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
												sendStringToLcd(" ");
     7a4:	8c ed       	ldi	r24, 0xDC	; 220
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
     7ac:	0f c0       	rjmp	.+30     	; 0x7cc <__stack+0x36d>
											}
											
											else
											{
												sendToLcd(COMMAND,WRITE,0xC0);
     7ae:	40 ec       	ldi	r20, 0xC0	; 192
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
												convertAndSend(minPresSet);
     7b8:	60 91 1d 01 	lds	r22, 0x011D
     7bc:	70 91 1e 01 	lds	r23, 0x011E
     7c0:	80 91 1f 01 	lds	r24, 0x011F
     7c4:	90 91 20 01 	lds	r25, 0x0120
     7c8:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
											}
											if ((READBIT(PINA,UP)) == 0)
     7cc:	ce 99       	sbic	0x19, 6	; 25
     7ce:	93 c0       	rjmp	.+294    	; 0x8f6 <__stack+0x497>
     7d0:	8f e3       	ldi	r24, 0x3F	; 63
     7d2:	9c e9       	ldi	r25, 0x9C	; 156
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <__stack+0x375>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <__stack+0x37b>
     7da:	00 00       	nop
											{
												_delay_ms(DEBOUNCE_VALUE);
												if ((READBIT(PINA,UP)) == 0)
     7dc:	ce 99       	sbic	0x19, 6	; 25
     7de:	8b c0       	rjmp	.+278    	; 0x8f6 <__stack+0x497>
												{
													switch (digitPlace)
     7e0:	11 30       	cpi	r17, 0x01	; 1
     7e2:	39 f1       	breq	.+78     	; 0x832 <__stack+0x3d3>
     7e4:	20 f0       	brcs	.+8      	; 0x7ee <__stack+0x38f>
     7e6:	12 30       	cpi	r17, 0x02	; 2
     7e8:	09 f0       	breq	.+2      	; 0x7ec <__stack+0x38d>
     7ea:	76 c0       	rjmp	.+236    	; 0x8d8 <__stack+0x479>
     7ec:	4f c0       	rjmp	.+158    	; 0x88c <__stack+0x42d>
													{
														case 0:
														if(minPresSet==0) minPresSet += 10;
     7ee:	c0 90 1d 01 	lds	r12, 0x011D
     7f2:	d0 90 1e 01 	lds	r13, 0x011E
     7f6:	e0 90 1f 01 	lds	r14, 0x011F
     7fa:	f0 90 20 01 	lds	r15, 0x0120
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	a9 01       	movw	r20, r18
     804:	c7 01       	movw	r24, r14
     806:	b6 01       	movw	r22, r12
     808:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     80c:	81 11       	cpse	r24, r1
     80e:	64 c0       	rjmp	.+200    	; 0x8d8 <__stack+0x479>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e2       	ldi	r20, 0x20	; 32
     816:	51 e4       	ldi	r21, 0x41	; 65
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
     820:	60 93 1d 01 	sts	0x011D, r22
     824:	70 93 1e 01 	sts	0x011E, r23
     828:	80 93 1f 01 	sts	0x011F, r24
     82c:	90 93 20 01 	sts	0x0120, r25
     830:	53 c0       	rjmp	.+166    	; 0x8d8 <__stack+0x479>
														break;
														
														case 1:
														if (minPresSet < (defPresSet-1))
     832:	c0 90 1d 01 	lds	r12, 0x011D
     836:	d0 90 1e 01 	lds	r13, 0x011E
     83a:	e0 90 1f 01 	lds	r14, 0x011F
     83e:	f0 90 20 01 	lds	r15, 0x0120
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e8       	ldi	r20, 0x80	; 128
     848:	5f e3       	ldi	r21, 0x3F	; 63
     84a:	60 91 21 01 	lds	r22, 0x0121
     84e:	70 91 22 01 	lds	r23, 0x0122
     852:	80 91 23 01 	lds	r24, 0x0123
     856:	90 91 24 01 	lds	r25, 0x0124
     85a:	0e 94 37 0b 	call	0x166e	; 0x166e <__subsf3>
     85e:	a7 01       	movw	r20, r14
     860:	96 01       	movw	r18, r12
     862:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__gesf2>
     866:	18 16       	cp	r1, r24
     868:	bc f5       	brge	.+110    	; 0x8d8 <__stack+0x479>
														{
															minPresSet += 1;
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e8       	ldi	r20, 0x80	; 128
     870:	5f e3       	ldi	r21, 0x3F	; 63
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
     87a:	60 93 1d 01 	sts	0x011D, r22
     87e:	70 93 1e 01 	sts	0x011E, r23
     882:	80 93 1f 01 	sts	0x011F, r24
     886:	90 93 20 01 	sts	0x0120, r25
     88a:	26 c0       	rjmp	.+76     	; 0x8d8 <__stack+0x479>
														}
														break;
														
														case 2:
														if (minPresSet < (defPresSet))
     88c:	c0 90 1d 01 	lds	r12, 0x011D
     890:	d0 90 1e 01 	lds	r13, 0x011E
     894:	e0 90 1f 01 	lds	r14, 0x011F
     898:	f0 90 20 01 	lds	r15, 0x0120
     89c:	20 91 21 01 	lds	r18, 0x0121
     8a0:	30 91 22 01 	lds	r19, 0x0122
     8a4:	40 91 23 01 	lds	r20, 0x0123
     8a8:	50 91 24 01 	lds	r21, 0x0124
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     8b4:	88 23       	and	r24, r24
     8b6:	84 f4       	brge	.+32     	; 0x8d8 <__stack+0x479>
														{
															minPresSet += 0.1;
     8b8:	2d ec       	ldi	r18, 0xCD	; 205
     8ba:	3c ec       	ldi	r19, 0xCC	; 204
     8bc:	4c ec       	ldi	r20, 0xCC	; 204
     8be:	5d e3       	ldi	r21, 0x3D	; 61
     8c0:	c7 01       	movw	r24, r14
     8c2:	b6 01       	movw	r22, r12
     8c4:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
     8c8:	60 93 1d 01 	sts	0x011D, r22
     8cc:	70 93 1e 01 	sts	0x011E, r23
     8d0:	80 93 1f 01 	sts	0x011F, r24
     8d4:	90 93 20 01 	sts	0x0120, r25
														}
														break;
													}
													sendToLcd(COMMAND,WRITE,0xC0);
     8d8:	40 ec       	ldi	r20, 0xC0	; 192
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
													convertAndSend(minPresSet);
     8e2:	60 91 1d 01 	lds	r22, 0x011D
     8e6:	70 91 1e 01 	lds	r23, 0x011E
     8ea:	80 91 1f 01 	lds	r24, 0x011F
     8ee:	90 91 20 01 	lds	r25, 0x0120
     8f2:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
												}
											}
											
											if ((READBIT(PINA,DOWN)) == 0)
     8f6:	cf 99       	sbic	0x19, 7	; 25
     8f8:	62 c0       	rjmp	.+196    	; 0x9be <__stack+0x55f>
     8fa:	8f e3       	ldi	r24, 0x3F	; 63
     8fc:	9c e9       	ldi	r25, 0x9C	; 156
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <__stack+0x49f>
     902:	00 c0       	rjmp	.+0      	; 0x904 <__stack+0x4a5>
     904:	00 00       	nop
											{
												_delay_ms(DEBOUNCE_VALUE);
												if ((READBIT(PINA,DOWN)) == 0)
     906:	cf 99       	sbic	0x19, 7	; 25
     908:	5a c0       	rjmp	.+180    	; 0x9be <__stack+0x55f>
												{
													switch (digitPlace)
     90a:	11 30       	cpi	r17, 0x01	; 1
     90c:	21 f0       	breq	.+8      	; 0x916 <__stack+0x4b7>
     90e:	12 30       	cpi	r17, 0x02	; 2
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x4b5>
     912:	46 c0       	rjmp	.+140    	; 0x9a0 <__stack+0x541>
     914:	23 c0       	rjmp	.+70     	; 0x95c <__stack+0x4fd>
														case 0:
														//if(defPresSet==10) defPresSet -= 10;
														break;
														
														case 1:
														if (minPresSet >= 1)
     916:	c0 90 1d 01 	lds	r12, 0x011D
     91a:	d0 90 1e 01 	lds	r13, 0x011E
     91e:	e0 90 1f 01 	lds	r14, 0x011F
     922:	f0 90 20 01 	lds	r15, 0x0120
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e8       	ldi	r20, 0x80	; 128
     92c:	5f e3       	ldi	r21, 0x3F	; 63
     92e:	c7 01       	movw	r24, r14
     930:	b6 01       	movw	r22, r12
     932:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__gesf2>
     936:	88 23       	and	r24, r24
     938:	9c f1       	brlt	.+102    	; 0x9a0 <__stack+0x541>
														{
															minPresSet -= 1;
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e8       	ldi	r20, 0x80	; 128
     940:	5f e3       	ldi	r21, 0x3F	; 63
     942:	c7 01       	movw	r24, r14
     944:	b6 01       	movw	r22, r12
     946:	0e 94 37 0b 	call	0x166e	; 0x166e <__subsf3>
     94a:	60 93 1d 01 	sts	0x011D, r22
     94e:	70 93 1e 01 	sts	0x011E, r23
     952:	80 93 1f 01 	sts	0x011F, r24
     956:	90 93 20 01 	sts	0x0120, r25
     95a:	22 c0       	rjmp	.+68     	; 0x9a0 <__stack+0x541>
														}
														break;
														
														case 2:
														if (minPresSet > 0.1)
     95c:	c0 90 1d 01 	lds	r12, 0x011D
     960:	d0 90 1e 01 	lds	r13, 0x011E
     964:	e0 90 1f 01 	lds	r14, 0x011F
     968:	f0 90 20 01 	lds	r15, 0x0120
     96c:	2d ec       	ldi	r18, 0xCD	; 205
     96e:	3c ec       	ldi	r19, 0xCC	; 204
     970:	4c ec       	ldi	r20, 0xCC	; 204
     972:	5d e3       	ldi	r21, 0x3D	; 61
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
     978:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__gesf2>
     97c:	18 16       	cp	r1, r24
     97e:	84 f4       	brge	.+32     	; 0x9a0 <__stack+0x541>
														{
															minPresSet -= 0.1;
     980:	2d ec       	ldi	r18, 0xCD	; 205
     982:	3c ec       	ldi	r19, 0xCC	; 204
     984:	4c ec       	ldi	r20, 0xCC	; 204
     986:	5d e3       	ldi	r21, 0x3D	; 61
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	0e 94 37 0b 	call	0x166e	; 0x166e <__subsf3>
     990:	60 93 1d 01 	sts	0x011D, r22
     994:	70 93 1e 01 	sts	0x011E, r23
     998:	80 93 1f 01 	sts	0x011F, r24
     99c:	90 93 20 01 	sts	0x0120, r25
														}
														break;
													}
													
													sendToLcd(COMMAND,WRITE,0xC0);
     9a0:	40 ec       	ldi	r20, 0xC0	; 192
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
													convertAndSend(minPresSet);
     9aa:	60 91 1d 01 	lds	r22, 0x011D
     9ae:	70 91 1e 01 	lds	r23, 0x011E
     9b2:	80 91 1f 01 	lds	r24, 0x011F
     9b6:	90 91 20 01 	lds	r25, 0x0120
     9ba:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
												}
											}
											
											if ((READBIT(PINA,SET)) == 0)
     9be:	cd 99       	sbic	0x19, 5	; 25
     9c0:	df ce       	rjmp	.-578    	; 0x780 <__stack+0x321>
     9c2:	8f e3       	ldi	r24, 0x3F	; 63
     9c4:	9c e9       	ldi	r25, 0x9C	; 156
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <__stack+0x567>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <__stack+0x56d>
     9cc:	00 00       	nop
											{
												_delay_ms(DEBOUNCE_VALUE);
												if ((READBIT(PINA,SET)) == 0)
     9ce:	cd 99       	sbic	0x19, 5	; 25
     9d0:	d7 ce       	rjmp	.-594    	; 0x780 <__stack+0x321>
												{
													while((READBIT(PINA,SET)) == 0);
     9d2:	cd 9b       	sbis	0x19, 5	; 25
     9d4:	fe cf       	rjmp	.-4      	; 0x9d2 <__stack+0x573>
													if (digitPlace < 2)
     9d6:	12 30       	cpi	r17, 0x02	; 2
     9d8:	10 f4       	brcc	.+4      	; 0x9de <__stack+0x57f>
													{
														digitPlace += 1;
     9da:	1f 5f       	subi	r17, 0xFF	; 255
     9dc:	d1 ce       	rjmp	.-606    	; 0x780 <__stack+0x321>
													}
													//-----------------------------------------------------------CUTOFF PRESSURE SET//DELAY TIMER SET START------------------------------------------------------------------------------------
													else
													{
														minPressure = minPresSet;
     9de:	80 91 1d 01 	lds	r24, 0x011D
     9e2:	90 91 1e 01 	lds	r25, 0x011E
     9e6:	a0 91 1f 01 	lds	r26, 0x011F
     9ea:	b0 91 20 01 	lds	r27, 0x0120
     9ee:	80 93 61 00 	sts	0x0061, r24
     9f2:	90 93 62 00 	sts	0x0062, r25
     9f6:	a0 93 63 00 	sts	0x0063, r26
     9fa:	b0 93 64 00 	sts	0x0064, r27
														sendToLcd(COMMAND,WRITE,0x01);
     9fe:	41 e0       	ldi	r20, 0x01	; 1
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
														sendToLcd(COMMAND,WRITE,0X80); //sTART AT FIRST LINE
     a08:	40 e8       	ldi	r20, 0x80	; 128
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
														sendStringToLcd("SET TIMER DELAY");
     a12:	80 ea       	ldi	r24, 0xA0	; 160
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
														cli();
     a1a:	f8 94       	cli
														eeprom_update_float(&eeMinPres,minPresSet);
     a1c:	40 91 1d 01 	lds	r20, 0x011D
     a20:	50 91 1e 01 	lds	r21, 0x011E
     a24:	60 91 1f 01 	lds	r22, 0x011F
     a28:	70 91 20 01 	lds	r23, 0x0120
     a2c:	84 e0       	ldi	r24, 0x04	; 4
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__eeupd_dword_m16a>
														sei();
     a34:	78 94       	sei
														digitPlace = 0;
														sendToLcd(COMMAND,WRITE,0XC0);
     a36:	40 ec       	ldi	r20, 0xC0	; 192
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
														char delayTimer[5] = {((timerValue/1000)+(0x30)),(((char)(timerValue/100)%10)+0x30),(((char)(timerValue/10)%10)+0x30),(((char)(timerValue)%10)+0x30),'\0'};
     a40:	20 91 25 01 	lds	r18, 0x0125
     a44:	30 91 26 01 	lds	r19, 0x0126
     a48:	36 95       	lsr	r19
     a4a:	27 95       	ror	r18
     a4c:	36 95       	lsr	r19
     a4e:	27 95       	ror	r18
     a50:	36 95       	lsr	r19
     a52:	27 95       	ror	r18
     a54:	a5 ec       	ldi	r26, 0xC5	; 197
     a56:	b0 e2       	ldi	r27, 0x20	; 32
     a58:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__umulhisi3>
     a5c:	92 95       	swap	r25
     a5e:	82 95       	swap	r24
     a60:	8f 70       	andi	r24, 0x0F	; 15
     a62:	89 27       	eor	r24, r25
     a64:	9f 70       	andi	r25, 0x0F	; 15
     a66:	89 27       	eor	r24, r25
     a68:	80 5d       	subi	r24, 0xD0	; 208
     a6a:	8e 83       	std	Y+6, r24	; 0x06
     a6c:	20 91 25 01 	lds	r18, 0x0125
     a70:	30 91 26 01 	lds	r19, 0x0126
     a74:	36 95       	lsr	r19
     a76:	27 95       	ror	r18
     a78:	36 95       	lsr	r19
     a7a:	27 95       	ror	r18
     a7c:	ab e7       	ldi	r26, 0x7B	; 123
     a7e:	b4 e1       	ldi	r27, 0x14	; 20
     a80:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__umulhisi3>
     a84:	96 95       	lsr	r25
     a86:	87 95       	ror	r24
     a88:	4d ec       	ldi	r20, 0xCD	; 205
     a8a:	84 9f       	mul	r24, r20
     a8c:	91 2d       	mov	r25, r1
     a8e:	11 24       	eor	r1, r1
     a90:	96 95       	lsr	r25
     a92:	96 95       	lsr	r25
     a94:	96 95       	lsr	r25
     a96:	99 0f       	add	r25, r25
     a98:	29 2f       	mov	r18, r25
     a9a:	22 0f       	add	r18, r18
     a9c:	22 0f       	add	r18, r18
     a9e:	92 0f       	add	r25, r18
     aa0:	89 1b       	sub	r24, r25
     aa2:	80 5d       	subi	r24, 0xD0	; 208
     aa4:	8f 83       	std	Y+7, r24	; 0x07
     aa6:	20 91 25 01 	lds	r18, 0x0125
     aaa:	30 91 26 01 	lds	r19, 0x0126
     aae:	ad ec       	ldi	r26, 0xCD	; 205
     ab0:	bc ec       	ldi	r27, 0xCC	; 204
     ab2:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__umulhisi3>
     ab6:	96 95       	lsr	r25
     ab8:	87 95       	ror	r24
     aba:	96 95       	lsr	r25
     abc:	87 95       	ror	r24
     abe:	96 95       	lsr	r25
     ac0:	87 95       	ror	r24
     ac2:	84 9f       	mul	r24, r20
     ac4:	91 2d       	mov	r25, r1
     ac6:	11 24       	eor	r1, r1
     ac8:	96 95       	lsr	r25
     aca:	96 95       	lsr	r25
     acc:	96 95       	lsr	r25
     ace:	99 0f       	add	r25, r25
     ad0:	29 2f       	mov	r18, r25
     ad2:	22 0f       	add	r18, r18
     ad4:	22 0f       	add	r18, r18
     ad6:	92 0f       	add	r25, r18
     ad8:	89 1b       	sub	r24, r25
     ada:	80 5d       	subi	r24, 0xD0	; 208
     adc:	88 87       	std	Y+8, r24	; 0x08
     ade:	80 91 25 01 	lds	r24, 0x0125
     ae2:	90 91 26 01 	lds	r25, 0x0126
     ae6:	84 9f       	mul	r24, r20
     ae8:	91 2d       	mov	r25, r1
     aea:	11 24       	eor	r1, r1
     aec:	96 95       	lsr	r25
     aee:	96 95       	lsr	r25
     af0:	96 95       	lsr	r25
     af2:	99 0f       	add	r25, r25
     af4:	29 2f       	mov	r18, r25
     af6:	22 0f       	add	r18, r18
     af8:	22 0f       	add	r18, r18
     afa:	92 0f       	add	r25, r18
     afc:	89 1b       	sub	r24, r25
     afe:	80 5d       	subi	r24, 0xD0	; 208
     b00:	89 87       	std	Y+9, r24	; 0x09
     b02:	1a 86       	std	Y+10, r1	; 0x0a
														sendStringToLcd(delayTimer);
     b04:	ce 01       	movw	r24, r28
     b06:	06 96       	adiw	r24, 0x06	; 6
     b08:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
														sendToLcd(COMMAND,WRITE,0xC6);
     b0c:	46 ec       	ldi	r20, 0xC6	; 198
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
														sendStringToLcd("SEC");
     b16:	80 eb       	ldi	r24, 0xB0	; 176
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
														sendToLcd(COMMAND,WRITE,0X80); //sTART AT FIRST LINE
														sendStringToLcd("SET TIMER DELAY");
														cli();
														eeprom_update_float(&eeMinPres,minPresSet);
														sei();
														digitPlace = 0;
     b1e:	10 e0       	ldi	r17, 0x00	; 0
														sendToLcd(COMMAND,WRITE,0xC6);
														sendStringToLcd("SEC");
														
														while(1)
														{
															if ((digitBlinkCount % 2) == 0)
     b20:	80 91 fd 00 	lds	r24, 0x00FD
     b24:	80 fd       	sbrc	r24, 0
     b26:	0b c0       	rjmp	.+22     	; 0xb3e <__stack+0x6df>
																{
																	sendToLcd(COMMAND,WRITE,(0xC0 + digitPlace));
     b28:	41 2f       	mov	r20, r17
     b2a:	40 54       	subi	r20, 0x40	; 64
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
																	sendStringToLcd(" ");
     b34:	8c ed       	ldi	r24, 0xDC	; 220
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
     b3c:	09 c0       	rjmp	.+18     	; 0xb50 <__stack+0x6f1>
																}
																
															else
																{
																	sendToLcd(COMMAND,WRITE,0xC0);
     b3e:	40 ec       	ldi	r20, 0xC0	; 192
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
																	sendStringToLcd(delayTimer);
     b48:	ce 01       	movw	r24, r28
     b4a:	06 96       	adiw	r24, 0x06	; 6
     b4c:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
																}
															
															if ((READBIT(PINA,UP)) == 0)
     b50:	ce 99       	sbic	0x19, 6	; 25
     b52:	24 c0       	rjmp	.+72     	; 0xb9c <__stack+0x73d>
     b54:	8f e3       	ldi	r24, 0x3F	; 63
     b56:	9c e9       	ldi	r25, 0x9C	; 156
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <__stack+0x6f9>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <__stack+0x6ff>
     b5e:	00 00       	nop
															{
																_delay_ms(DEBOUNCE_VALUE);
																if ((READBIT(PINA,UP)) == 0)
     b60:	ce 99       	sbic	0x19, 6	; 25
     b62:	1c c0       	rjmp	.+56     	; 0xb9c <__stack+0x73d>
																{
																	if ((delayTimer[digitPlace]) < (9 + 0x30))
     b64:	81 2f       	mov	r24, r17
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	e6 e0       	ldi	r30, 0x06	; 6
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	ec 0f       	add	r30, r28
     b6e:	fd 1f       	adc	r31, r29
     b70:	e8 0f       	add	r30, r24
     b72:	f9 1f       	adc	r31, r25
     b74:	20 81       	ld	r18, Z
     b76:	29 33       	cpi	r18, 0x39	; 57
     b78:	40 f4       	brcc	.+16     	; 0xb8a <__stack+0x72b>
																	{
																		delayTimer[digitPlace] += 1;
     b7a:	e6 e0       	ldi	r30, 0x06	; 6
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ec 0f       	add	r30, r28
     b80:	fd 1f       	adc	r31, r29
     b82:	e8 0f       	add	r30, r24
     b84:	f9 1f       	adc	r31, r25
     b86:	2f 5f       	subi	r18, 0xFF	; 255
     b88:	20 83       	st	Z, r18
																	}
																	
																	sendToLcd(COMMAND,WRITE,0xC0);
     b8a:	40 ec       	ldi	r20, 0xC0	; 192
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
																	sendStringToLcd(delayTimer);
     b94:	ce 01       	movw	r24, r28
     b96:	06 96       	adiw	r24, 0x06	; 6
     b98:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
																}
															}
															
															if ((READBIT(PINA,DOWN)) == 0)
     b9c:	cf 99       	sbic	0x19, 7	; 25
     b9e:	24 c0       	rjmp	.+72     	; 0xbe8 <__stack+0x789>
     ba0:	8f e3       	ldi	r24, 0x3F	; 63
     ba2:	9c e9       	ldi	r25, 0x9C	; 156
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <__stack+0x745>
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <__stack+0x74b>
     baa:	00 00       	nop
															{
																_delay_ms(DEBOUNCE_VALUE);
																if ((READBIT(PINA,DOWN)) == 0)
     bac:	cf 99       	sbic	0x19, 7	; 25
     bae:	1c c0       	rjmp	.+56     	; 0xbe8 <__stack+0x789>
																{
																	if (delayTimer[digitPlace] > (0x30))
     bb0:	81 2f       	mov	r24, r17
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	e6 e0       	ldi	r30, 0x06	; 6
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	ec 0f       	add	r30, r28
     bba:	fd 1f       	adc	r31, r29
     bbc:	e8 0f       	add	r30, r24
     bbe:	f9 1f       	adc	r31, r25
     bc0:	20 81       	ld	r18, Z
     bc2:	21 33       	cpi	r18, 0x31	; 49
     bc4:	40 f0       	brcs	.+16     	; 0xbd6 <__stack+0x777>
																	{
																		delayTimer[digitPlace] -= 1;
     bc6:	e6 e0       	ldi	r30, 0x06	; 6
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	ec 0f       	add	r30, r28
     bcc:	fd 1f       	adc	r31, r29
     bce:	e8 0f       	add	r30, r24
     bd0:	f9 1f       	adc	r31, r25
     bd2:	21 50       	subi	r18, 0x01	; 1
     bd4:	20 83       	st	Z, r18
																	}
																	
																	sendToLcd(COMMAND, WRITE, 0xC0);
     bd6:	40 ec       	ldi	r20, 0xC0	; 192
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
																	sendStringToLcd(delayTimer);
     be0:	ce 01       	movw	r24, r28
     be2:	06 96       	adiw	r24, 0x06	; 6
     be4:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
																}
															}
															if ((READBIT(PINA,SET)) == 0 )
     be8:	cd 99       	sbic	0x19, 5	; 25
     bea:	9a cf       	rjmp	.-204    	; 0xb20 <__stack+0x6c1>
     bec:	8f e3       	ldi	r24, 0x3F	; 63
     bee:	9c e9       	ldi	r25, 0x9C	; 156
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <__stack+0x791>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <__stack+0x797>
     bf6:	00 00       	nop
															{
																_delay_ms(DEBOUNCE_VALUE);
																if ((READBIT(PINA,SET)) == 0)
     bf8:	cd 99       	sbic	0x19, 5	; 25
     bfa:	92 cf       	rjmp	.-220    	; 0xb20 <__stack+0x6c1>
																{
																	while ((READBIT(PINA,SET)) == 0);
     bfc:	cd 9b       	sbis	0x19, 5	; 25
     bfe:	fe cf       	rjmp	.-4      	; 0xbfc <__stack+0x79d>
																	if (digitPlace < 3)
     c00:	13 30       	cpi	r17, 0x03	; 3
     c02:	10 f4       	brcc	.+4      	; 0xc08 <__stack+0x7a9>
																	{
																		digitPlace += 1;
     c04:	1f 5f       	subi	r17, 0xFF	; 255
     c06:	8c cf       	rjmp	.-232    	; 0xb20 <__stack+0x6c1>
																	}
																	
																	else
																	{
																		timerValue = 1000*(delayTimer[0] - 0X30) + 100*(delayTimer[1] - 0X30) +
     c08:	4e 81       	ldd	r20, Y+6	; 0x06
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	40 53       	subi	r20, 0x30	; 48
     c0e:	51 09       	sbc	r21, r1
     c10:	88 ee       	ldi	r24, 0xE8	; 232
     c12:	93 e0       	ldi	r25, 0x03	; 3
     c14:	48 9f       	mul	r20, r24
     c16:	90 01       	movw	r18, r0
     c18:	49 9f       	mul	r20, r25
     c1a:	30 0d       	add	r19, r0
     c1c:	58 9f       	mul	r21, r24
     c1e:	30 0d       	add	r19, r0
     c20:	11 24       	eor	r1, r1
     c22:	8f 81       	ldd	r24, Y+7	; 0x07
     c24:	94 e6       	ldi	r25, 0x64	; 100
     c26:	89 9f       	mul	r24, r25
     c28:	20 0d       	add	r18, r0
     c2a:	31 1d       	adc	r19, r1
     c2c:	11 24       	eor	r1, r1
																		10*(delayTimer[2]  - 0X30) + (delayTimer[3] - 0X30);
     c2e:	88 85       	ldd	r24, Y+8	; 0x08
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	ac 01       	movw	r20, r24
     c38:	44 0f       	add	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	44 0f       	add	r20, r20
     c3e:	55 1f       	adc	r21, r21
     c40:	84 0f       	add	r24, r20
     c42:	95 1f       	adc	r25, r21
     c44:	82 0f       	add	r24, r18
     c46:	93 1f       	adc	r25, r19
     c48:	29 85       	ldd	r18, Y+9	; 0x09
     c4a:	82 0f       	add	r24, r18
     c4c:	91 1d       	adc	r25, r1
     c4e:	80 5d       	subi	r24, 0xD0	; 208
     c50:	94 41       	sbci	r25, 0x14	; 20
																		digitPlace += 1;
																	}
																	
																	else
																	{
																		timerValue = 1000*(delayTimer[0] - 0X30) + 100*(delayTimer[1] - 0X30) +
     c52:	90 93 26 01 	sts	0x0126, r25
     c56:	80 93 25 01 	sts	0x0125, r24
																		10*(delayTimer[2]  - 0X30) + (delayTimer[3] - 0X30);
																		cli();
     c5a:	f8 94       	cli
																		eeprom_update_word(&eeTimerDelay,timerValue);
     c5c:	60 91 25 01 	lds	r22, 0x0125
     c60:	70 91 26 01 	lds	r23, 0x0126
     c64:	88 e0       	ldi	r24, 0x08	; 8
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__eeupd_word_m16a>
     c6c:	8f e1       	ldi	r24, 0x1F	; 31
     c6e:	9e e4       	ldi	r25, 0x4E	; 78
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <__stack+0x811>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <__stack+0x817>
     c76:	00 00       	nop
																		_delay_ms(10);
																		sei();
     c78:	78 94       	sei
     c7a:	8f e9       	ldi	r24, 0x9F	; 159
     c7c:	9f e0       	ldi	r25, 0x0F	; 15
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <__stack+0x81f>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <__stack+0x825>
     c84:	00 00       	nop
																		_delay_ms(2);
																		sendToLcd(COMMAND,WRITE,0x01);
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
																		sendToLcd(COMMAND,WRITE,0x80);
     c90:	40 e8       	ldi	r20, 0x80	; 128
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
																		sendStringToLcd("SET TIMINGS:");
     c9a:	84 eb       	ldi	r24, 0xB4	; 180
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
																		displayTime(startHour,0xC0);
     ca2:	60 ec       	ldi	r22, 0xC0	; 192
     ca4:	80 91 11 01 	lds	r24, 0x0111
     ca8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																		sendStringToLcd(":");
     cac:	8a e8       	ldi	r24, 0x8A	; 138
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
																		displayTime(startMinute,0xC3);
     cb4:	63 ec       	ldi	r22, 0xC3	; 195
     cb6:	80 91 28 01 	lds	r24, 0x0128
     cba:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																		sendToLcd(COMMAND,WRITE,0xC7);
     cbe:	47 ec       	ldi	r20, 0xC7	; 199
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
																		sendStringToLcd("TO");
     cc8:	81 ec       	ldi	r24, 0xC1	; 193
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
																		displayTime(endHour,0xCB);
     cd0:	6b ec       	ldi	r22, 0xCB	; 203
     cd2:	80 91 2b 01 	lds	r24, 0x012B
     cd6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																		sendToLcd(COMMAND,WRITE,0xCD);
     cda:	4d ec       	ldi	r20, 0xCD	; 205
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
																		sendStringToLcd(":");
     ce4:	8a e8       	ldi	r24, 0x8A	; 138
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
																		digitPlace = 0;
																		displayTime(endMinute,0xCE);
     cec:	6e ec       	ldi	r22, 0xCE	; 206
     cee:	80 91 2c 01 	lds	r24, 0x012C
     cf2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																		sendToLcd(COMMAND,WRITE,0xC7);
																		sendStringToLcd("TO");
																		displayTime(endHour,0xCB);
																		sendToLcd(COMMAND,WRITE,0xCD);
																		sendStringToLcd(":");
																		digitPlace = 0;
     cf6:	10 e0       	ldi	r17, 0x00	; 0
																						}
																																											
																						else if (startMinute == 0 && startHour>0)
																						{
																							
																							startMinute = 45;
     cf8:	0f 2e       	mov	r0, r31
     cfa:	fd e2       	ldi	r31, 0x2D	; 45
     cfc:	ef 2e       	mov	r14, r31
     cfe:	f0 2d       	mov	r31, r0
																				if ((READBIT(PINA,SET)) == 0)
																				{
																					while ((READBIT(PINA,SET)) == 0);
																					if (digitPlace < 1)
																					{
																						digitPlace += 1;
     d00:	01 e0       	ldi	r16, 0x01	; 1
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <__stack+0x8a7>
     d04:	10 2f       	mov	r17, r16
																		digitPlace = 0;
																		displayTime(endMinute,0xCE);
																		
																		while(1)
																		{
																			if ((READBIT(PINA,UP)) == 0)
     d06:	ce 99       	sbic	0x19, 6	; 25
     d08:	48 c0       	rjmp	.+144    	; 0xd9a <__stack+0x93b>
     d0a:	8f e3       	ldi	r24, 0x3F	; 63
     d0c:	9c e9       	ldi	r25, 0x9C	; 156
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <__stack+0x8af>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <__stack+0x8b5>
     d14:	00 00       	nop
																			{
																				_delay_ms(DEBOUNCE_VALUE);
																				if ((READBIT(PINA,UP)) == 0)
     d16:	ce 99       	sbic	0x19, 6	; 25
     d18:	40 c0       	rjmp	.+128    	; 0xd9a <__stack+0x93b>
																				{
																					switch(digitPlace)
     d1a:	11 23       	and	r17, r17
     d1c:	19 f0       	breq	.+6      	; 0xd24 <__stack+0x8c5>
     d1e:	11 30       	cpi	r17, 0x01	; 1
     d20:	e1 f5       	brne	.+120    	; 0xd9a <__stack+0x93b>
     d22:	20 c0       	rjmp	.+64     	; 0xd64 <__stack+0x905>
																					{
																						case 0:
																						if (startMinute < 45 && startHour < 24)
     d24:	80 91 28 01 	lds	r24, 0x0128
     d28:	8d 32       	cpi	r24, 0x2D	; 45
     d2a:	40 f4       	brcc	.+16     	; 0xd3c <__stack+0x8dd>
     d2c:	90 91 11 01 	lds	r25, 0x0111
     d30:	98 31       	cpi	r25, 0x18	; 24
     d32:	20 f4       	brcc	.+8      	; 0xd3c <__stack+0x8dd>
																						{
																							startMinute += 15;
     d34:	81 5f       	subi	r24, 0xF1	; 241
     d36:	80 93 28 01 	sts	0x0128, r24
     d3a:	09 c0       	rjmp	.+18     	; 0xd4e <__stack+0x8ef>
																						}
																						else
																						{
																							startMinute = 0;
     d3c:	10 92 28 01 	sts	0x0128, r1
																							if (startHour<=23)
     d40:	80 91 11 01 	lds	r24, 0x0111
     d44:	88 31       	cpi	r24, 0x18	; 24
     d46:	18 f4       	brcc	.+6      	; 0xd4e <__stack+0x8ef>
																							{
																								startHour+=1;
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	80 93 11 01 	sts	0x0111, r24
																							}
																						}
																						displayTime(startHour,0xC0);
     d4e:	60 ec       	ldi	r22, 0xC0	; 192
     d50:	80 91 11 01 	lds	r24, 0x0111
     d54:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																						displayTime(startMinute,0xC3);
     d58:	63 ec       	ldi	r22, 0xC3	; 195
     d5a:	80 91 28 01 	lds	r24, 0x0128
     d5e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																						break;
     d62:	1b c0       	rjmp	.+54     	; 0xd9a <__stack+0x93b>
																		//---------------------------endHour/min............//				
																						case 1:
																						if (endMinute < 45)
     d64:	80 91 2c 01 	lds	r24, 0x012C
     d68:	8d 32       	cpi	r24, 0x2D	; 45
     d6a:	20 f4       	brcc	.+8      	; 0xd74 <__stack+0x915>
																						{
																							endMinute += 15;
     d6c:	81 5f       	subi	r24, 0xF1	; 241
     d6e:	80 93 2c 01 	sts	0x012C, r24
     d72:	09 c0       	rjmp	.+18     	; 0xd86 <__stack+0x927>
																						}
																						else
																						{
																							endMinute = 0;
     d74:	10 92 2c 01 	sts	0x012C, r1
																							if (endHour<=23)
     d78:	80 91 2b 01 	lds	r24, 0x012B
     d7c:	88 31       	cpi	r24, 0x18	; 24
     d7e:	18 f4       	brcc	.+6      	; 0xd86 <__stack+0x927>
																							{
																								endHour+=1;
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 93 2b 01 	sts	0x012B, r24
																							}
																						}
																						displayTime(endHour,0xCB);
     d86:	6b ec       	ldi	r22, 0xCB	; 203
     d88:	80 91 2b 01 	lds	r24, 0x012B
     d8c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																						displayTime(endMinute,0xCE);
     d90:	6e ec       	ldi	r22, 0xCE	; 206
     d92:	80 91 2c 01 	lds	r24, 0x012C
     d96:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																						break;
																					}
																				}
																			}
																			
																			if ((READBIT(PINA,DOWN)) == 0)
     d9a:	cf 99       	sbic	0x19, 7	; 25
     d9c:	48 c0       	rjmp	.+144    	; 0xe2e <__stack+0x9cf>
     d9e:	8f e3       	ldi	r24, 0x3F	; 63
     da0:	9c e9       	ldi	r25, 0x9C	; 156
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <__stack+0x943>
     da6:	00 c0       	rjmp	.+0      	; 0xda8 <__stack+0x949>
     da8:	00 00       	nop
																			{
																				_delay_ms(DEBOUNCE_VALUE);
																				if ((READBIT(PINA,DOWN)) == 0)
     daa:	cf 99       	sbic	0x19, 7	; 25
     dac:	40 c0       	rjmp	.+128    	; 0xe2e <__stack+0x9cf>
																				{
																					switch(digitPlace)
     dae:	11 23       	and	r17, r17
     db0:	19 f0       	breq	.+6      	; 0xdb8 <__stack+0x959>
     db2:	11 30       	cpi	r17, 0x01	; 1
     db4:	e1 f5       	brne	.+120    	; 0xe2e <__stack+0x9cf>
     db6:	1e c0       	rjmp	.+60     	; 0xdf4 <__stack+0x995>
																					{
																						case 0:
																						if (startMinute >= 15)
     db8:	80 91 28 01 	lds	r24, 0x0128
     dbc:	8f 30       	cpi	r24, 0x0F	; 15
     dbe:	20 f0       	brcs	.+8      	; 0xdc8 <__stack+0x969>
																						{
																							startMinute -= 15;
     dc0:	8f 50       	subi	r24, 0x0F	; 15
     dc2:	80 93 28 01 	sts	0x0128, r24
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <__stack+0x97f>
																						}
																																											
																						else if (startMinute == 0 && startHour>0)
     dc8:	81 11       	cpse	r24, r1
     dca:	09 c0       	rjmp	.+18     	; 0xdde <__stack+0x97f>
     dcc:	80 91 11 01 	lds	r24, 0x0111
     dd0:	88 23       	and	r24, r24
     dd2:	29 f0       	breq	.+10     	; 0xdde <__stack+0x97f>
																						{
																							
																							startMinute = 45;
     dd4:	e0 92 28 01 	sts	0x0128, r14
																							startHour -= 1;
     dd8:	81 50       	subi	r24, 0x01	; 1
     dda:	80 93 11 01 	sts	0x0111, r24
																							
																						}
																						displayTime(startHour,0xC0);
     dde:	60 ec       	ldi	r22, 0xC0	; 192
     de0:	80 91 11 01 	lds	r24, 0x0111
     de4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																						displayTime(startMinute,0xC3);
     de8:	63 ec       	ldi	r22, 0xC3	; 195
     dea:	80 91 28 01 	lds	r24, 0x0128
     dee:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																						break;
     df2:	1d c0       	rjmp	.+58     	; 0xe2e <__stack+0x9cf>
																						//---------------------------endHour/min............//
																						case 1:
																						if (endMinute >= 15)
     df4:	80 91 2c 01 	lds	r24, 0x012C
     df8:	8f 30       	cpi	r24, 0x0F	; 15
     dfa:	20 f0       	brcs	.+8      	; 0xe04 <__stack+0x9a5>
																						{
																							endMinute -= 15;
     dfc:	8f 50       	subi	r24, 0x0F	; 15
     dfe:	80 93 2c 01 	sts	0x012C, r24
     e02:	0b c0       	rjmp	.+22     	; 0xe1a <__stack+0x9bb>
																						}
																						
																					
																						
																						else if (endMinute == 0 && endHour>0)
     e04:	81 11       	cpse	r24, r1
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <__stack+0x9bb>
     e08:	80 91 2b 01 	lds	r24, 0x012B
     e0c:	88 23       	and	r24, r24
     e0e:	29 f0       	breq	.+10     	; 0xe1a <__stack+0x9bb>
																						{
																							endMinute = 45;
     e10:	e0 92 2c 01 	sts	0x012C, r14
																							endHour-=1;
     e14:	81 50       	subi	r24, 0x01	; 1
     e16:	80 93 2b 01 	sts	0x012B, r24
																						}
																						displayTime(endHour,0xCB);
     e1a:	6b ec       	ldi	r22, 0xCB	; 203
     e1c:	80 91 2b 01 	lds	r24, 0x012B
     e20:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																						displayTime(endMinute,0xCE);
     e24:	6e ec       	ldi	r22, 0xCE	; 206
     e26:	80 91 2c 01 	lds	r24, 0x012C
     e2a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
																						break;
																					}
																				}
																			}
																			
																			if ((READBIT(PINA,SET)) == 0)
     e2e:	cd 99       	sbic	0x19, 5	; 25
     e30:	6a cf       	rjmp	.-300    	; 0xd06 <__stack+0x8a7>
     e32:	8f e3       	ldi	r24, 0x3F	; 63
     e34:	9c e9       	ldi	r25, 0x9C	; 156
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <__stack+0x9d7>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <__stack+0x9dd>
     e3c:	00 00       	nop
																			{
																				_delay_ms(DEBOUNCE_VALUE);
																				if ((READBIT(PINA,SET)) == 0)
     e3e:	cd 99       	sbic	0x19, 5	; 25
     e40:	62 cf       	rjmp	.-316    	; 0xd06 <__stack+0x8a7>
																				{
																					while ((READBIT(PINA,SET)) == 0);
     e42:	cd 9b       	sbis	0x19, 5	; 25
     e44:	fe cf       	rjmp	.-4      	; 0xe42 <__stack+0x9e3>
																					if (digitPlace < 1)
     e46:	11 23       	and	r17, r17
     e48:	09 f4       	brne	.+2      	; 0xe4c <__stack+0x9ed>
     e4a:	5c cf       	rjmp	.-328    	; 0xd04 <__stack+0x8a5>
																						digitPlace += 1;
																					}
																					
																					else
																					{
																						cli();
     e4c:	f8 94       	cli
																						eeprom_update_byte(&eeStartHour,startHour);
     e4e:	60 91 11 01 	lds	r22, 0x0111
     e52:	8e e0       	ldi	r24, 0x0E	; 14
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
																						eeprom_update_byte(&eeStartMinute,startMinute);
     e5a:	60 91 28 01 	lds	r22, 0x0128
     e5e:	8d e0       	ldi	r24, 0x0D	; 13
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
																						eeprom_update_byte(&eeEndHour,endHour);
     e66:	60 91 2b 01 	lds	r22, 0x012B
     e6a:	8c e0       	ldi	r24, 0x0C	; 12
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
																						eeprom_update_byte(&eeEndMinute,endMinute);
     e72:	60 91 2c 01 	lds	r22, 0x012C
     e76:	8b e0       	ldi	r24, 0x0B	; 11
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
																						sei();
     e7e:	78 94       	sei
																						digitPlace = 0;
																						digitBlinkFlag = 0;
     e80:	10 92 fc 00 	sts	0x00FC, r1
     e84:	19 c0       	rjmp	.+50     	; 0xeb8 <__stack+0xa59>
						}
						
					}
					else
					{
						sendToLcd(COMMAND,WRITE,0x01);
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
						sendToLcd(COMMAND,WRITE,0x80);
     e90:	40 e8       	ldi	r20, 0x80	; 128
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
						
						sendStringToLcd("WRONG PASSWORD");
     e9a:	84 ec       	ldi	r24, 0xC4	; 196
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	24 e3       	ldi	r18, 0x34	; 52
     ea6:	8c e0       	ldi	r24, 0x0C	; 12
     ea8:	91 50       	subi	r25, 0x01	; 1
     eaa:	20 40       	sbci	r18, 0x00	; 0
     eac:	80 40       	sbci	r24, 0x00	; 0
     eae:	e1 f7       	brne	.-8      	; 0xea8 <__stack+0xa49>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <__stack+0xa53>
     eb2:	00 00       	nop
						_delay_ms(500);
						digitBlinkFlag = 0;
     eb4:	10 92 fc 00 	sts	0x00FC, r1
				}
				
			}
		}
	}
}
     eb8:	2a 96       	adiw	r28, 0x0a	; 10
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	08 95       	ret

00000ed6 <I2C_Init>:
uint8_t DS1307_setDate(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second);
void DS1307_getDate(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second);

void I2C_Init()
{
	TWSR = 0;
     ed6:	11 b8       	out	0x01, r1	; 1
	TWBR = ((F_CPU/SCL_CLOCK) - 16) / 2 ;
     ed8:	8a e2       	ldi	r24, 0x2A	; 42
     eda:	80 b9       	out	0x00, r24	; 0
     edc:	08 95       	ret

00000ede <I2C_Start>:
unsigned char I2C_Start(unsigned char address)
{
	uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     ede:	94 ea       	ldi	r25, 0xA4	; 164
     ee0:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     ee2:	06 b6       	in	r0, 0x36	; 54
     ee4:	07 fe       	sbrs	r0, 7
     ee6:	fd cf       	rjmp	.-6      	; 0xee2 <I2C_Start+0x4>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     ee8:	91 b1       	in	r25, 0x01	; 1
     eea:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     eec:	98 30       	cpi	r25, 0x08	; 8
     eee:	11 f0       	breq	.+4      	; 0xef4 <I2C_Start+0x16>
     ef0:	90 31       	cpi	r25, 0x10	; 16
     ef2:	79 f4       	brne	.+30     	; 0xf12 <I2C_Start+0x34>

	// send device address
	TWDR = address;
     ef4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     ef6:	84 e8       	ldi	r24, 0x84	; 132
     ef8:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     efa:	06 b6       	in	r0, 0x36	; 54
     efc:	07 fe       	sbrs	r0, 7
     efe:	fd cf       	rjmp	.-6      	; 0xefa <I2C_Start+0x1c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     f00:	91 b1       	in	r25, 0x01	; 1
     f02:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     f04:	98 31       	cpi	r25, 0x18	; 24
     f06:	39 f0       	breq	.+14     	; 0xf16 <I2C_Start+0x38>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 34       	cpi	r25, 0x40	; 64
     f0c:	29 f4       	brne	.+10     	; 0xf18 <I2C_Start+0x3a>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     f16:	80 e0       	ldi	r24, 0x00	; 0

}
     f18:	08 95       	ret

00000f1a <I2C_StartWait>:


	while ( 1 )
	{
		// send START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f1a:	24 ea       	ldi	r18, 0xA4	; 164
		twst = TW_STATUS & 0xF8;
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
		
		// send device address
		TWDR = address;
		TWCR = (1<<TWINT) | (1<<TWEN);
     f1c:	34 e8       	ldi	r19, 0x84	; 132
		// check value of TWI Status Register. Mask prescaler bits.
		twst = TW_STATUS & 0xF8;
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
		{
			/* device busy, send stop condition to terminate write operation */
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f1e:	44 e9       	ldi	r20, 0x94	; 148


	while ( 1 )
	{
		// send START condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f20:	26 bf       	out	0x36, r18	; 54
		
		// wait until transmission completed
		while(!(TWCR & (1<<TWINT)));
     f22:	06 b6       	in	r0, 0x36	; 54
     f24:	07 fe       	sbrs	r0, 7
     f26:	fd cf       	rjmp	.-6      	; 0xf22 <I2C_StartWait+0x8>
		
		// check value of TWI Status Register. Mask prescaler bits.
		twst = TW_STATUS & 0xF8;
     f28:	91 b1       	in	r25, 0x01	; 1
     f2a:	98 7f       	andi	r25, 0xF8	; 248
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     f2c:	98 30       	cpi	r25, 0x08	; 8
     f2e:	11 f0       	breq	.+4      	; 0xf34 <I2C_StartWait+0x1a>
     f30:	90 31       	cpi	r25, 0x10	; 16
     f32:	b1 f7       	brne	.-20     	; 0xf20 <I2C_StartWait+0x6>
		
		// send device address
		TWDR = address;
     f34:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT) | (1<<TWEN);
     f36:	36 bf       	out	0x36, r19	; 54
		
		// wail until transmission completed
		while(!(TWCR & (1<<TWINT)));
     f38:	06 b6       	in	r0, 0x36	; 54
     f3a:	07 fe       	sbrs	r0, 7
     f3c:	fd cf       	rjmp	.-6      	; 0xf38 <I2C_StartWait+0x1e>
		
		// check value of TWI Status Register. Mask prescaler bits.
		twst = TW_STATUS & 0xF8;
     f3e:	91 b1       	in	r25, 0x01	; 1
     f40:	98 7f       	andi	r25, 0xF8	; 248
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
     f42:	90 32       	cpi	r25, 0x20	; 32
     f44:	11 f0       	breq	.+4      	; 0xf4a <I2C_StartWait+0x30>
     f46:	98 35       	cpi	r25, 0x58	; 88
     f48:	29 f4       	brne	.+10     	; 0xf54 <I2C_StartWait+0x3a>
		{
			/* device busy, send stop condition to terminate write operation */
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f4a:	46 bf       	out	0x36, r20	; 54
			
			// wait until stop condition is executed and bus released
			while(TWCR & (1<<TWSTO));
     f4c:	06 b6       	in	r0, 0x36	; 54
     f4e:	04 fc       	sbrc	r0, 4
     f50:	fd cf       	rjmp	.-6      	; 0xf4c <I2C_StartWait+0x32>
     f52:	e6 cf       	rjmp	.-52     	; 0xf20 <I2C_StartWait+0x6>
     f54:	08 95       	ret

00000f56 <I2C_Write>:
unsigned char I2C_Write( unsigned char data)
{
	uint8_t   twst;
	
	// send data to the previously addressed device
	TWDR = data;
     f56:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     f58:	84 e8       	ldi	r24, 0x84	; 132
     f5a:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     f5c:	06 b6       	in	r0, 0x36	; 54
     f5e:	07 fe       	sbrs	r0, 7
     f60:	fd cf       	rjmp	.-6      	; 0xf5c <I2C_Write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     f62:	91 b1       	in	r25, 0x01	; 1
     f64:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	98 32       	cpi	r25, 0x28	; 40
     f6a:	09 f4       	brne	.+2      	; 0xf6e <I2C_Write+0x18>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}
     f6e:	08 95       	ret

00000f70 <I2C_Stop>:
void I2C_Stop()
{
	/* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f70:	84 e9       	ldi	r24, 0x94	; 148
     f72:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     f74:	06 b6       	in	r0, 0x36	; 54
     f76:	04 fc       	sbrc	r0, 4
     f78:	fd cf       	rjmp	.-6      	; 0xf74 <I2C_Stop+0x4>

}
     f7a:	08 95       	ret

00000f7c <I2C_RepStart>:
unsigned char	I2C_RepStart(unsigned char address)
{
	return I2C_Start( address );
     f7c:	0e 94 6f 07 	call	0xede	; 0xede <I2C_Start>

}
     f80:	08 95       	ret

00000f82 <I2C_ReadAck>:
unsigned char I2C_ReadAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     f82:	84 ec       	ldi	r24, 0xC4	; 196
     f84:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
     f86:	06 b6       	in	r0, 0x36	; 54
     f88:	07 fe       	sbrs	r0, 7
     f8a:	fd cf       	rjmp	.-6      	; 0xf86 <I2C_ReadAck+0x4>

	return TWDR;
     f8c:	83 b1       	in	r24, 0x03	; 3

}
     f8e:	08 95       	ret

00000f90 <I2C_ReadNak>:
unsigned char I2C_ReadNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     f90:	84 e8       	ldi	r24, 0x84	; 132
     f92:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
     f94:	06 b6       	in	r0, 0x36	; 54
     f96:	07 fe       	sbrs	r0, 7
     f98:	fd cf       	rjmp	.-6      	; 0xf94 <I2C_ReadNak+0x4>
	
	return TWDR;
     f9a:	83 b1       	in	r24, 0x03	; 3

}
     f9c:	08 95       	ret

00000f9e <DS1307_Init>:

void DS1307_Init() {
	I2C_Init();
     f9e:	0e 94 6b 07 	call	0xed6	; 0xed6 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa2:	8a e1       	ldi	r24, 0x1A	; 26
     fa4:	8a 95       	dec	r24
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <DS1307_Init+0x6>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <DS1307_Init+0xc>
     faa:	08 95       	ret

00000fac <DS1307_BCDtoDEC>:
}
uint8_t DS1307_DECtoBCD(uint8_t val) {
	return val + 6 * (val / 10);
}
uint8_t DS1307_BCDtoDEC(uint8_t val) {
	return val - 6 * (val >> 4);
     fac:	98 2f       	mov	r25, r24
     fae:	92 95       	swap	r25
     fb0:	9f 70       	andi	r25, 0x0F	; 15
     fb2:	29 2f       	mov	r18, r25
     fb4:	22 0f       	add	r18, r18
     fb6:	92 0f       	add	r25, r18
     fb8:	99 0f       	add	r25, r25
}
     fba:	89 1b       	sub	r24, r25
     fbc:	08 95       	ret

00000fbe <DS1307_getDate>:
	I2C_Write(0x00); //start oscillator
	I2C_Stop();
	
	return 0;
}
void DS1307_getDate(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second) {
     fbe:	8f 92       	push	r8
     fc0:	9f 92       	push	r9
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
     fd8:	6b 01       	movw	r12, r22
     fda:	5a 01       	movw	r10, r20
     fdc:	49 01       	movw	r8, r18
	I2C_StartWait(DS1307_ADDR | I2C_WRITE);
     fde:	80 ed       	ldi	r24, 0xD0	; 208
     fe0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <I2C_StartWait>
	I2C_Write(0x00);//stop oscillator
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	0e 94 ab 07 	call	0xf56	; 0xf56 <I2C_Write>
	I2C_Stop();
     fea:	0e 94 b8 07 	call	0xf70	; 0xf70 <I2C_Stop>

	I2C_RepStart(DS1307_ADDR | I2C_READ);
     fee:	81 ed       	ldi	r24, 0xD1	; 209
     ff0:	0e 94 be 07 	call	0xf7c	; 0xf7c <I2C_RepStart>
	*second = DS1307_BCDtoDEC(I2C_ReadAck() & 0x7F);
     ff4:	0e 94 c1 07 	call	0xf82	; 0xf82 <I2C_ReadAck>
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	0e 94 d6 07 	call	0xfac	; 0xfac <DS1307_BCDtoDEC>
     ffe:	f7 01       	movw	r30, r14
    1000:	80 83       	st	Z, r24
	*minute = DS1307_BCDtoDEC(I2C_ReadAck());
    1002:	0e 94 c1 07 	call	0xf82	; 0xf82 <I2C_ReadAck>
    1006:	0e 94 d6 07 	call	0xfac	; 0xfac <DS1307_BCDtoDEC>
    100a:	f8 01       	movw	r30, r16
    100c:	80 83       	st	Z, r24
	*hour = DS1307_BCDtoDEC(I2C_ReadAck());
    100e:	0e 94 c1 07 	call	0xf82	; 0xf82 <I2C_ReadAck>
    1012:	0e 94 d6 07 	call	0xfac	; 0xfac <DS1307_BCDtoDEC>
    1016:	f4 01       	movw	r30, r8
    1018:	80 83       	st	Z, r24
	I2C_ReadAck();
    101a:	0e 94 c1 07 	call	0xf82	; 0xf82 <I2C_ReadAck>
	*day = DS1307_BCDtoDEC(I2C_ReadAck());
    101e:	0e 94 c1 07 	call	0xf82	; 0xf82 <I2C_ReadAck>
    1022:	0e 94 d6 07 	call	0xfac	; 0xfac <DS1307_BCDtoDEC>
    1026:	f5 01       	movw	r30, r10
    1028:	80 83       	st	Z, r24
	*month = DS1307_BCDtoDEC(I2C_ReadAck());
    102a:	0e 94 c1 07 	call	0xf82	; 0xf82 <I2C_ReadAck>
    102e:	0e 94 d6 07 	call	0xfac	; 0xfac <DS1307_BCDtoDEC>
    1032:	f6 01       	movw	r30, r12
    1034:	80 83       	st	Z, r24
	*year = DS1307_BCDtoDEC(I2C_ReadNak());
    1036:	0e 94 c8 07 	call	0xf90	; 0xf90 <I2C_ReadNak>
    103a:	0e 94 d6 07 	call	0xfac	; 0xfac <DS1307_BCDtoDEC>
    103e:	88 83       	st	Y, r24
	I2C_Stop();
    1040:	0e 94 b8 07 	call	0xf70	; 0xf70 <I2C_Stop>
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	bf 90       	pop	r11
    1056:	af 90       	pop	r10
    1058:	9f 90       	pop	r9
    105a:	8f 90       	pop	r8
    105c:	08 95       	ret

0000105e <InitADC>:
#include "includes.h"

void InitADC()
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
    105e:	80 e4       	ldi	r24, 0x40	; 64
    1060:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADPS2)|(0<<ADPS1)|(0<<ADPS0); //Prescalar div factor =128
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	86 b9       	out	0x06, r24	; 6
    1066:	08 95       	ret

00001068 <ReadADC>:
float ReadADC(uint8_t ch)
{
	//PORTA = 0xFE;
	
	
	ADCSRA |= (1<<ADEN);
    1068:	37 9a       	sbi	0x06, 7	; 6
	
	ch=(ADMUX & 0xf0)|(ch& 0x0f);
    106a:	97 b1       	in	r25, 0x07	; 7
    106c:	8f 70       	andi	r24, 0x0F	; 15
    106e:	90 7f       	andi	r25, 0xF0	; 240
    1070:	98 2b       	or	r25, r24
	ADMUX=ch;
    1072:	97 b9       	out	0x07, r25	; 7

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
    1074:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
    1076:	34 9b       	sbis	0x06, 4	; 6
    1078:	fe cf       	rjmp	.-4      	; 0x1076 <ReadADC+0xe>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
    107a:	34 9a       	sbi	0x06, 4	; 6

	ADCSRA &= ~(1<<ADEN);
    107c:	37 98       	cbi	0x06, 7	; 6
	//PORTA = 0xFF;
	return(ADC);
    107e:	64 b1       	in	r22, 0x04	; 4
    1080:	75 b1       	in	r23, 0x05	; 5
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 39 0c 	call	0x1872	; 0x1872 <__floatunsisf>
}
    108a:	08 95       	ret

0000108c <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	2f 93       	push	r18
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
	timerCount++;
    109c:	80 91 0d 01 	lds	r24, 0x010D
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	80 93 0d 01 	sts	0x010D, r24
	blinkingTimerCount++;
    10a6:	80 91 09 01 	lds	r24, 0x0109
    10aa:	90 91 0a 01 	lds	r25, 0x010A
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	90 93 0a 01 	sts	0x010A, r25
    10b4:	80 93 09 01 	sts	0x0109, r24
	if (blinkingTimerCount == 2000)
    10b8:	80 3d       	cpi	r24, 0xD0	; 208
    10ba:	97 40       	sbci	r25, 0x07	; 7
    10bc:	91 f4       	brne	.+36     	; 0x10e2 <__vector_9+0x56>
	{
		if (digitBlinkFlag == 1)
    10be:	80 91 fc 00 	lds	r24, 0x00FC
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	51 f4       	brne	.+20     	; 0x10da <__vector_9+0x4e>
		{
			if (digitBlinkCount < 250)
    10c6:	80 91 fd 00 	lds	r24, 0x00FD
    10ca:	8a 3f       	cpi	r24, 0xFA	; 250
    10cc:	20 f4       	brcc	.+8      	; 0x10d6 <__vector_9+0x4a>
			{
				digitBlinkCount++;
    10ce:	8f 5f       	subi	r24, 0xFF	; 255
    10d0:	80 93 fd 00 	sts	0x00FD, r24
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <__vector_9+0x4e>
			}
			else digitBlinkCount=0;
    10d6:	10 92 fd 00 	sts	0x00FD, r1
		}
		blinkingTimerCount = 0;
    10da:	10 92 0a 01 	sts	0x010A, r1
    10de:	10 92 09 01 	sts	0x0109, r1
	}
	
	if (timerCount == 61) //61 = 1 second
    10e2:	80 91 0d 01 	lds	r24, 0x010D
    10e6:	8d 33       	cpi	r24, 0x3D	; 61
    10e8:	51 f5       	brne	.+84     	; 0x113e <__vector_9+0xb2>
	{
		if (pressureLowerPumpOFF_Flag == 1)
    10ea:	80 91 08 01 	lds	r24, 0x0108
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	29 f4       	brne	.+10     	; 0x10fc <__vector_9+0x70>
		{
			pressureLowerPumpOFF_Count++;
    10f2:	80 91 07 01 	lds	r24, 0x0107
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	80 93 07 01 	sts	0x0107, r24
		}
		
		
		if (pressureLowerPumpON_Flag == 1)
    10fc:	80 91 06 01 	lds	r24, 0x0106
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	29 f4       	brne	.+10     	; 0x110e <__vector_9+0x82>
		{
			pressureLowerPumpON_Count++;
    1104:	80 91 05 01 	lds	r24, 0x0105
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	80 93 05 01 	sts	0x0105, r24
		}
		
		if (delayOnTimer_Flag == 1)
    110e:	80 91 02 01 	lds	r24, 0x0102
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	49 f4       	brne	.+18     	; 0x1128 <__vector_9+0x9c>
		{
			delayOnTimer_Count++;
    1116:	80 91 00 01 	lds	r24, 0x0100
    111a:	90 91 01 01 	lds	r25, 0x0101
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	90 93 01 01 	sts	0x0101, r25
    1124:	80 93 00 01 	sts	0x0100, r24
		}
		
		if (minPressure_Flag == 1)
    1128:	80 91 0c 01 	lds	r24, 0x010C
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	29 f4       	brne	.+10     	; 0x113a <__vector_9+0xae>
		{
			minPressure_Count++;
    1130:	80 91 0b 01 	lds	r24, 0x010B
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	80 93 0b 01 	sts	0x010B, r24
		}
		
		
		timerCount=0;
    113a:	10 92 0d 01 	sts	0x010D, r1
	}
}
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <main>:

int main(void)
{
	//SFIOR &= ~(1<<PUD);
	DDRA = 0x00; //Input port (analog and keyboard)
    114e:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFE; //Enable Pull-up resistors, and make ADC0 as tri-stated
    1150:	8e ef       	ldi	r24, 0xFE	; 254
    1152:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF; //RS, RW, EN
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF; //LcdData = output
    1158:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF; //PortB for LED and motors
    115a:	87 bb       	out	0x17, r24	; 23
	
	
	
	SETBIT (PORTC,EN); //Disable LCD
    115c:	ac 9a       	sbi	0x15, 4	; 21
	CLEARBIT(PORTB,PUMP); //Make sure the pump is switched off.
    115e:	c0 98       	cbi	0x18, 0	; 24
	InitADC();
    1160:	0e 94 2f 08 	call	0x105e	; 0x105e <InitADC>
	DS1307_Init();
    1164:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DS1307_Init>
	TIMSK |= (1<<TOIE0);
    1168:	89 b7       	in	r24, 0x39	; 57
    116a:	81 60       	ori	r24, 0x01	; 1
    116c:	89 bf       	out	0x39, r24	; 57
	
	TCCR0 |=  (1<<CS01); //prescalar = 8 for 8MHz oscillator
    116e:	83 b7       	in	r24, 0x33	; 51
    1170:	82 60       	ori	r24, 0x02	; 2
    1172:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    1174:	12 be       	out	0x32, r1	; 50
	//minPressure = eeprom_read_float(&eeMinPres);
	//defaultPressure = eeprom_read_float(&eeDefPres);
	//minPressure = 3.2;
	//timerValue = 0005;
		
	if ( (eeprom_read_byte(&eeChecksum)) != 1)
    1176:	8a e0       	ldi	r24, 0x0A	; 10
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__eerd_byte_m16a>
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	69 f1       	breq	.+90     	; 0x11dc <main+0x8e>
	{
		
		eeprom_update_float(&eeDefaultPres,0);
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	ba 01       	movw	r22, r20
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__eeupd_dword_m16a>
		eeprom_update_float(&eeMinPres,0);
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	ba 01       	movw	r22, r20
    1196:	84 e0       	ldi	r24, 0x04	; 4
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__eeupd_dword_m16a>
		eeprom_update_word(&eeTimerDelay,0);
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	88 e0       	ldi	r24, 0x08	; 8
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__eeupd_word_m16a>
		
		eeprom_update_byte(&eeStartHour,0);
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	8e e0       	ldi	r24, 0x0E	; 14
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
		eeprom_update_byte(&eeStartMinute,0);
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	8d e0       	ldi	r24, 0x0D	; 13
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
		eeprom_update_byte(&eeEndHour,0);
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	8c e0       	ldi	r24, 0x0C	; 12
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
		eeprom_update_byte(&eeEndMinute,0);
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	8b e0       	ldi	r24, 0x0B	; 11
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
		
		eeprom_update_byte(&eeChecksum,1);
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	8a e0       	ldi	r24, 0x0A	; 10
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
	}
	
	
	minPresSet = eeprom_read_float(&eeMinPres);
    11dc:	84 e0       	ldi	r24, 0x04	; 4
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__eerd_dword_m16a>
    11e4:	4b 01       	movw	r8, r22
    11e6:	5c 01       	movw	r10, r24
    11e8:	60 93 1d 01 	sts	0x011D, r22
    11ec:	70 93 1e 01 	sts	0x011E, r23
    11f0:	80 93 1f 01 	sts	0x011F, r24
    11f4:	90 93 20 01 	sts	0x0120, r25
	defPresSet = eeprom_read_float(&eeDefaultPres);
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__eerd_dword_m16a>
    1200:	6b 01       	movw	r12, r22
    1202:	7c 01       	movw	r14, r24
    1204:	60 93 21 01 	sts	0x0121, r22
    1208:	70 93 22 01 	sts	0x0122, r23
    120c:	80 93 23 01 	sts	0x0123, r24
    1210:	90 93 24 01 	sts	0x0124, r25
	
	timerValue = eeprom_read_word(&eeTimerDelay);
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__eerd_word_m16a>
    121c:	90 93 26 01 	sts	0x0126, r25
    1220:	80 93 25 01 	sts	0x0125, r24
	
	startHour = eeprom_read_byte(&eeStartHour);
    1224:	8e e0       	ldi	r24, 0x0E	; 14
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__eerd_byte_m16a>
    122c:	80 93 11 01 	sts	0x0111, r24
	startMinute = eeprom_read_byte(&eeStartMinute);
    1230:	8d e0       	ldi	r24, 0x0D	; 13
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__eerd_byte_m16a>
    1238:	80 93 28 01 	sts	0x0128, r24
	endHour = eeprom_read_byte(&eeEndHour);
    123c:	8c e0       	ldi	r24, 0x0C	; 12
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__eerd_byte_m16a>
    1244:	80 93 2b 01 	sts	0x012B, r24
	endMinute = eeprom_read_byte(&eeEndMinute);
    1248:	8b e0       	ldi	r24, 0x0B	; 11
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__eerd_byte_m16a>
    1250:	80 93 2c 01 	sts	0x012C, r24
		
	minPressure = minPresSet;
    1254:	80 92 61 00 	sts	0x0061, r8
    1258:	90 92 62 00 	sts	0x0062, r9
    125c:	a0 92 63 00 	sts	0x0063, r10
    1260:	b0 92 64 00 	sts	0x0064, r11
	defaultPressure = defPresSet;
    1264:	c0 92 65 00 	sts	0x0065, r12
    1268:	d0 92 66 00 	sts	0x0066, r13
    126c:	e0 92 67 00 	sts	0x0067, r14
    1270:	f0 92 68 00 	sts	0x0068, r15
	
	sei();
    1274:	78 94       	sei
	
	sendToLcd(COMMAND, WRITE, 0x01) ; //Clear LCD
    1276:	41 e0       	ldi	r20, 0x01	; 1
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	sendToLcd(COMMAND, WRITE, 0x80) ; //Starting on 0,1
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	sendToLcd(COMMAND, WRITE, 0x0C) ;
    128a:	4c e0       	ldi	r20, 0x0C	; 12
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	sendToLcd(COMMAND, WRITE, 0x38) ; //LCD on, Cursor off
    1294:	48 e3       	ldi	r20, 0x38	; 56
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	
	while(1)
    {
		 if ( ( READBIT(PINA,SET) ) == 0)
    129e:	cd 99       	sbic	0x19, 5	; 25
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <main+0x176>
		 {
			 sendToLcd(COMMAND,WRITE,0x01);
    12a2:	41 e0       	ldi	r20, 0x01	; 1
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ac:	2f ef       	ldi	r18, 0xFF	; 255
    12ae:	84 e3       	ldi	r24, 0x34	; 52
    12b0:	9c e0       	ldi	r25, 0x0C	; 12
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	80 40       	sbci	r24, 0x00	; 0
    12b6:	90 40       	sbci	r25, 0x00	; 0
    12b8:	e1 f7       	brne	.-8      	; 0x12b2 <main+0x164>
    12ba:	00 c0       	rjmp	.+0      	; 0x12bc <main+0x16e>
    12bc:	00 00       	nop
			 
			 _delay_ms(500);
			 if ( (READBIT(PINA,SET) ) == 0)
    12be:	cd 9b       	sbis	0x19, 5	; 25
			 {
				 keyboardFunction();
    12c0:	0e 94 14 01 	call	0x228	; 0x228 <keyboardFunction>
			 }
		 }
		
		if ((READBIT(PINA,UP)) == 0)
    12c4:	ce 99       	sbic	0x19, 6	; 25
    12c6:	3b c0       	rjmp	.+118    	; 0x133e <main+0x1f0>
		{
	while ((READBIT(PINA,UP)) == 0) //see time if up key is pressed
    12c8:	ce 99       	sbic	0x19, 6	; 25
    12ca:	30 c0       	rjmp	.+96     	; 0x132c <main+0x1de>
			{
				DS1307_getDate(&year,&month,&day,&hour,&minute,&second);
    12cc:	0f 2e       	mov	r0, r31
    12ce:	f7 e1       	ldi	r31, 0x17	; 23
    12d0:	ef 2e       	mov	r14, r31
    12d2:	f1 e0       	ldi	r31, 0x01	; 1
    12d4:	ff 2e       	mov	r15, r31
    12d6:	f0 2d       	mov	r31, r0
    12d8:	08 e1       	ldi	r16, 0x18	; 24
    12da:	11 e0       	ldi	r17, 0x01	; 1
    12dc:	27 e2       	ldi	r18, 0x27	; 39
    12de:	31 e0       	ldi	r19, 0x01	; 1
    12e0:	4a e2       	ldi	r20, 0x2A	; 42
    12e2:	51 e0       	ldi	r21, 0x01	; 1
    12e4:	66 e1       	ldi	r22, 0x16	; 22
    12e6:	71 e0       	ldi	r23, 0x01	; 1
    12e8:	89 e2       	ldi	r24, 0x29	; 41
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 df 07 	call	0xfbe	; 0xfbe <DS1307_getDate>
				
				sendToLcd(COMMAND,WRITE,0xC0);
    12f0:	40 ec       	ldi	r20, 0xC0	; 192
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
				displayTime(hour,0xC0);
    12fa:	60 ec       	ldi	r22, 0xC0	; 192
    12fc:	80 91 27 01 	lds	r24, 0x0127
    1300:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
				sendStringToLcd(":");
    1304:	8a e8       	ldi	r24, 0x8A	; 138
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
				displayTime(minute,0xC3);
    130c:	63 ec       	ldi	r22, 0xC3	; 195
    130e:	80 91 18 01 	lds	r24, 0x0118
    1312:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
				sendStringToLcd(":");
    1316:	8a e8       	ldi	r24, 0x8A	; 138
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
				displayTime(second,0xC6);
    131e:	66 ec       	ldi	r22, 0xC6	; 198
    1320:	80 91 17 01 	lds	r24, 0x0117
    1324:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <displayTime>
			 }
		 }
		
		if ((READBIT(PINA,UP)) == 0)
		{
	while ((READBIT(PINA,UP)) == 0) //see time if up key is pressed
    1328:	ce 9b       	sbis	0x19, 6	; 25
    132a:	d0 cf       	rjmp	.-96     	; 0x12cc <main+0x17e>
				sendStringToLcd(":");
				displayTime(minute,0xC3);
				sendStringToLcd(":");
				displayTime(second,0xC6);
			}
		sendToLcd(COMMAND,WRITE,0xC0);
    132c:	40 ec       	ldi	r20, 0xC0	; 192
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
		sendStringToLcd("          ");
    1336:	83 ed       	ldi	r24, 0xD3	; 211
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
		}
		
		
		
		if ( ((READBIT(PINA,LEVEL_SENSOR))==0) && (pressureLowerPumpON_Flag==0) )
    133e:	c9 99       	sbic	0x19, 1	; 25
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <main+0x206>
    1342:	80 91 06 01 	lds	r24, 0x0106
    1346:	81 11       	cpse	r24, r1
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <main+0x206>
		{
			CLEARBIT(PORTB,PUMP);
    134a:	c0 98       	cbi	0x18, 0	; 24
			pumpOnFlag = 0;
    134c:	10 92 04 01 	sts	0x0104, r1
			SETBIT(PORTB,LEVEL_SENSOR_LED);
    1350:	c1 9a       	sbi	0x18, 1	; 24
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <main+0x208>
		}
		
		else CLEARBIT(PORTB,LEVEL_SENSOR_LED);
    1354:	c1 98       	cbi	0x18, 1	; 24
		
		if ( ((READBIT(PINA,DRY_RUN))==0)  && (pressureLowerPumpON_Flag==0))
    1356:	ca 99       	sbic	0x19, 2	; 25
    1358:	09 c0       	rjmp	.+18     	; 0x136c <main+0x21e>
    135a:	80 91 06 01 	lds	r24, 0x0106
    135e:	81 11       	cpse	r24, r1
    1360:	05 c0       	rjmp	.+10     	; 0x136c <main+0x21e>
		{
			CLEARBIT(PORTB,PUMP);
    1362:	c0 98       	cbi	0x18, 0	; 24
			pumpOnFlag = 0;
    1364:	10 92 04 01 	sts	0x0104, r1
			SETBIT(PORTB,DRY_RUN_LED);
    1368:	c2 9a       	sbi	0x18, 2	; 24
    136a:	01 c0       	rjmp	.+2      	; 0x136e <main+0x220>
		}
		else CLEARBIT(PORTB,DRY_RUN_LED);
    136c:	c2 98       	cbi	0x18, 2	; 24
		
		adcResult = ReadADC(0);
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	0e 94 34 08 	call	0x1068	; 0x1068 <ReadADC>
    1374:	60 93 19 01 	sts	0x0119, r22
    1378:	70 93 1a 01 	sts	0x011A, r23
    137c:	80 93 1b 01 	sts	0x011B, r24
    1380:	90 93 1c 01 	sts	0x011C, r25
			
		if (flagWritten==0)  //Write on LCD the data and wait till enter key is pressed for password and onwards
    1384:	80 91 0e 01 	lds	r24, 0x010E
    1388:	81 11       	cpse	r24, r1
    138a:	0b c0       	rjmp	.+22     	; 0x13a2 <main+0x254>
		{
			sendToLcd(COMMAND, WRITE, 0x01);
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
			sendStringToLcd("RUN: ");
    1394:	8e ed       	ldi	r24, 0xDE	; 222
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
			
			flagWritten = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 0e 01 	sts	0x010E, r24
		}
		if (delayOnTimer_Flag == 0)
    13a2:	80 91 02 01 	lds	r24, 0x0102
    13a6:	81 11       	cpse	r24, r1
    13a8:	1b c0       	rjmp	.+54     	; 0x13e0 <main+0x292>
		{
			sendToLcd(COMMAND,WRITE,0xC0);
    13aa:	40 ec       	ldi	r20, 0xC0	; 192
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
			sendStringToLcd("SET:  ");
    13b2:	84 ee       	ldi	r24, 0xE4	; 228
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
			sendToLcd(COMMAND, WRITE, 0xC6);
    13ba:	46 ec       	ldi	r20, 0xC6	; 198
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
			convertAndSend(defPresSet);
    13c4:	60 91 21 01 	lds	r22, 0x0121
    13c8:	70 91 22 01 	lds	r23, 0x0122
    13cc:	80 91 23 01 	lds	r24, 0x0123
    13d0:	90 91 24 01 	lds	r25, 0x0124
    13d4:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
			sendStringToLcd(" Bar");
    13d8:	8b ee       	ldi	r24, 0xEB	; 235
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
		}
		
		currentPressure = (( ((adcResult+1) - 196) *10) / (962-196)) ;
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e8       	ldi	r20, 0x80	; 128
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	60 91 19 01 	lds	r22, 0x0119
    13ec:	70 91 1a 01 	lds	r23, 0x011A
    13f0:	80 91 1b 01 	lds	r24, 0x011B
    13f4:	90 91 1c 01 	lds	r25, 0x011C
    13f8:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	44 e4       	ldi	r20, 0x44	; 68
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	0e 94 37 0b 	call	0x166e	; 0x166e <__subsf3>
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 ef 0c 	call	0x19de	; 0x19de <__mulsf3>
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e8       	ldi	r19, 0x80	; 128
    1418:	4f e3       	ldi	r20, 0x3F	; 63
    141a:	54 e4       	ldi	r21, 0x44	; 68
    141c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__divsf3>
    1420:	46 2f       	mov	r20, r22
    1422:	57 2f       	mov	r21, r23
    1424:	68 2f       	mov	r22, r24
    1426:	79 2f       	mov	r23, r25
    1428:	40 93 12 01 	sts	0x0112, r20
    142c:	50 93 13 01 	sts	0x0113, r21
    1430:	60 93 14 01 	sts	0x0114, r22
    1434:	70 93 15 01 	sts	0x0115, r23
		sendToLcd(COMMAND,WRITE,0x80);
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
		sendStringToLcd("RUN: ");
    1442:	8e ed       	ldi	r24, 0xDE	; 222
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
		sendToLcd(COMMAND, WRITE, 0x86);
    144a:	46 e8       	ldi	r20, 0x86	; 134
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
		convertAndSend(currentPressure);
    1454:	60 91 12 01 	lds	r22, 0x0112
    1458:	70 91 13 01 	lds	r23, 0x0113
    145c:	80 91 14 01 	lds	r24, 0x0114
    1460:	90 91 15 01 	lds	r25, 0x0115
    1464:	0e 94 a7 00 	call	0x14e	; 0x14e <convertAndSend>
		sendStringToLcd(" Bar");
    1468:	8b ee       	ldi	r24, 0xEB	; 235
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
		
		if (pressureLowerPumpON_Flag == 0 && (delayOnTimer_Flag == 0))
    1470:	80 91 06 01 	lds	r24, 0x0106
    1474:	81 11       	cpse	r24, r1
    1476:	23 c0       	rjmp	.+70     	; 0x14be <main+0x370>
    1478:	80 91 02 01 	lds	r24, 0x0102
    147c:	81 11       	cpse	r24, r1
    147e:	1f c0       	rjmp	.+62     	; 0x14be <main+0x370>
		{
			if (currentPressure < (defPresSet - 0.5))
    1480:	c0 90 12 01 	lds	r12, 0x0112
    1484:	d0 90 13 01 	lds	r13, 0x0113
    1488:	e0 90 14 01 	lds	r14, 0x0114
    148c:	f0 90 15 01 	lds	r15, 0x0115
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	60 91 21 01 	lds	r22, 0x0121
    149c:	70 91 22 01 	lds	r23, 0x0122
    14a0:	80 91 23 01 	lds	r24, 0x0123
    14a4:	90 91 24 01 	lds	r25, 0x0124
    14a8:	0e 94 37 0b 	call	0x166e	; 0x166e <__subsf3>
    14ac:	a7 01       	movw	r20, r14
    14ae:	96 01       	movw	r18, r12
    14b0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__gesf2>
    14b4:	18 16       	cp	r1, r24
    14b6:	1c f4       	brge	.+6      	; 0x14be <main+0x370>
			{
				pressureLowerPumpOFF_Flag = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	80 93 08 01 	sts	0x0108, r24
			}
		}
		
		if (pressureLowerPumpOFF_Count >= 10)
    14be:	80 91 07 01 	lds	r24, 0x0107
    14c2:	8a 30       	cpi	r24, 0x0A	; 10
    14c4:	70 f1       	brcs	.+92     	; 0x1522 <main+0x3d4>
		{
			pressureLowerPumpOFF_Flag = 0;
    14c6:	10 92 08 01 	sts	0x0108, r1
			pressureLowerPumpOFF_Count = 0;	
    14ca:	10 92 07 01 	sts	0x0107, r1
			if (currentPressure < (defPresSet-0.5))
    14ce:	c0 90 12 01 	lds	r12, 0x0112
    14d2:	d0 90 13 01 	lds	r13, 0x0113
    14d6:	e0 90 14 01 	lds	r14, 0x0114
    14da:	f0 90 15 01 	lds	r15, 0x0115
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	5f e3       	ldi	r21, 0x3F	; 63
    14e6:	60 91 21 01 	lds	r22, 0x0121
    14ea:	70 91 22 01 	lds	r23, 0x0122
    14ee:	80 91 23 01 	lds	r24, 0x0123
    14f2:	90 91 24 01 	lds	r25, 0x0124
    14f6:	0e 94 37 0b 	call	0x166e	; 0x166e <__subsf3>
    14fa:	a7 01       	movw	r20, r14
    14fc:	96 01       	movw	r18, r12
    14fe:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__gesf2>
    1502:	18 16       	cp	r1, r24
    1504:	74 f4       	brge	.+28     	; 0x1522 <main+0x3d4>
			{
				if ( ((READBIT(PINA,LEVEL_SENSOR)) != 0) && ((READBIT(PINA,DRY_RUN)) != 0))
    1506:	c9 9b       	sbis	0x19, 1	; 25
    1508:	0c c0       	rjmp	.+24     	; 0x1522 <main+0x3d4>
    150a:	ca 9b       	sbis	0x19, 2	; 25
    150c:	0a c0       	rjmp	.+20     	; 0x1522 <main+0x3d4>
				{
					SETBIT(PORTB,PUMP);
    150e:	c0 9a       	sbi	0x18, 0	; 24
					delayTimerElapsedFlag = 0;
    1510:	10 92 03 01 	sts	0x0103, r1
					firstStartFlag = 0;
    1514:	10 92 60 00 	sts	0x0060, r1
					pumpOnFlag = 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 93 04 01 	sts	0x0104, r24
					pressureLowerPumpON_Flag = 1;
    151e:	80 93 06 01 	sts	0x0106, r24
				}
			}
		}
		
		if (pressureLowerPumpON_Count >= 10)
    1522:	80 91 05 01 	lds	r24, 0x0105
    1526:	8a 30       	cpi	r24, 0x0A	; 10
    1528:	20 f0       	brcs	.+8      	; 0x1532 <main+0x3e4>
		{
			pressureLowerPumpON_Flag = 0;
    152a:	10 92 06 01 	sts	0x0106, r1
			pressureLowerPumpON_Count = 0;
    152e:	10 92 05 01 	sts	0x0105, r1
		}
		
		if ((currentPressure > (defPresSet + 0.5)) && (delayOnTimer_Flag == 0) && (delayTimerElapsedFlag==0) && (firstStartFlag==0) && (pressureLowerPumpON_Flag==0))
    1532:	c0 90 12 01 	lds	r12, 0x0112
    1536:	d0 90 13 01 	lds	r13, 0x0113
    153a:	e0 90 14 01 	lds	r14, 0x0114
    153e:	f0 90 15 01 	lds	r15, 0x0115
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	60 91 21 01 	lds	r22, 0x0121
    154e:	70 91 22 01 	lds	r23, 0x0122
    1552:	80 91 23 01 	lds	r24, 0x0123
    1556:	90 91 24 01 	lds	r25, 0x0124
    155a:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
    155e:	a7 01       	movw	r20, r14
    1560:	96 01       	movw	r18, r12
    1562:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
    1566:	88 23       	and	r24, r24
    1568:	bc f4       	brge	.+46     	; 0x1598 <main+0x44a>
    156a:	80 91 02 01 	lds	r24, 0x0102
    156e:	81 11       	cpse	r24, r1
    1570:	13 c0       	rjmp	.+38     	; 0x1598 <main+0x44a>
    1572:	80 91 03 01 	lds	r24, 0x0103
    1576:	81 11       	cpse	r24, r1
    1578:	29 c0       	rjmp	.+82     	; 0x15cc <main+0x47e>
    157a:	80 91 60 00 	lds	r24, 0x0060
    157e:	81 11       	cpse	r24, r1
    1580:	25 c0       	rjmp	.+74     	; 0x15cc <main+0x47e>
    1582:	80 91 06 01 	lds	r24, 0x0106
    1586:	81 11       	cpse	r24, r1
    1588:	21 c0       	rjmp	.+66     	; 0x15cc <main+0x47e>
		{
			CLEARBIT(PORTB,PUMP);
    158a:	c0 98       	cbi	0x18, 0	; 24
			pumpOnFlag = 0;
    158c:	10 92 04 01 	sts	0x0104, r1
			delayOnTimer_Flag = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 93 02 01 	sts	0x0102, r24
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <main+0x452>
			
			
		}
		
		if (delayOnTimer_Flag == 1)
    1598:	80 91 02 01 	lds	r24, 0x0102
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	b1 f4       	brne	.+44     	; 0x15cc <main+0x47e>
		{
			sendToLcd(COMMAND,WRITE,0xC0);
    15a0:	40 ec       	ldi	r20, 0xC0	; 192
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <sendToLcd>
			sendStringToLcd("TIME LEFT:");
    15aa:	80 ef       	ldi	r24, 0xF0	; 240
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 63 00 	call	0xc6	; 0xc6 <sendStringToLcd>
			SendDigitsToLcd((timerValue - delayOnTimer_Count),0xCA);
    15b2:	80 91 25 01 	lds	r24, 0x0125
    15b6:	90 91 26 01 	lds	r25, 0x0126
    15ba:	20 91 00 01 	lds	r18, 0x0100
    15be:	30 91 01 01 	lds	r19, 0x0101
    15c2:	6a ec       	ldi	r22, 0xCA	; 202
    15c4:	82 1b       	sub	r24, r18
    15c6:	93 0b       	sbc	r25, r19
    15c8:	0e 94 7a 00 	call	0xf4	; 0xf4 <SendDigitsToLcd>
		}
		
		if (delayOnTimer_Count >= timerValue)
    15cc:	80 91 25 01 	lds	r24, 0x0125
    15d0:	90 91 26 01 	lds	r25, 0x0126
    15d4:	20 91 00 01 	lds	r18, 0x0100
    15d8:	30 91 01 01 	lds	r19, 0x0101
    15dc:	28 17       	cp	r18, r24
    15de:	39 07       	cpc	r19, r25
    15e0:	48 f0       	brcs	.+18     	; 0x15f4 <main+0x4a6>
		{
			
			delayOnTimer_Flag = 0;
    15e2:	10 92 02 01 	sts	0x0102, r1
			delayOnTimer_Count = 0;
    15e6:	10 92 01 01 	sts	0x0101, r1
    15ea:	10 92 00 01 	sts	0x0100, r1
			delayTimerElapsedFlag = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 93 03 01 	sts	0x0103, r24
		}
		
		if ((currentPressure < minPresSet) && (pumpOnFlag==1))
    15f4:	60 91 12 01 	lds	r22, 0x0112
    15f8:	70 91 13 01 	lds	r23, 0x0113
    15fc:	80 91 14 01 	lds	r24, 0x0114
    1600:	90 91 15 01 	lds	r25, 0x0115
    1604:	c0 90 1d 01 	lds	r12, 0x011D
    1608:	d0 90 1e 01 	lds	r13, 0x011E
    160c:	e0 90 1f 01 	lds	r14, 0x011F
    1610:	f0 90 20 01 	lds	r15, 0x0120
    1614:	a7 01       	movw	r20, r14
    1616:	96 01       	movw	r18, r12
    1618:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
    161c:	88 23       	and	r24, r24
    161e:	34 f4       	brge	.+12     	; 0x162c <main+0x4de>
    1620:	80 91 04 01 	lds	r24, 0x0104
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	11 f4       	brne	.+4      	; 0x162c <main+0x4de>
		{
			minPressure_Flag = 1;
    1628:	80 93 0c 01 	sts	0x010C, r24
		}
		
		if (minPressure_Count >= 30 && pumpOnFlag == 1)
    162c:	80 91 0b 01 	lds	r24, 0x010B
    1630:	8e 31       	cpi	r24, 0x1E	; 30
    1632:	08 f4       	brcc	.+2      	; 0x1636 <main+0x4e8>
    1634:	34 ce       	rjmp	.-920    	; 0x129e <main+0x150>
    1636:	80 91 04 01 	lds	r24, 0x0104
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	09 f0       	breq	.+2      	; 0x1640 <main+0x4f2>
    163e:	2f ce       	rjmp	.-930    	; 0x129e <main+0x150>
		{
			if (currentPressure < minPresSet)
    1640:	20 91 12 01 	lds	r18, 0x0112
    1644:	30 91 13 01 	lds	r19, 0x0113
    1648:	40 91 14 01 	lds	r20, 0x0114
    164c:	50 91 15 01 	lds	r21, 0x0115
    1650:	c7 01       	movw	r24, r14
    1652:	b6 01       	movw	r22, r12
    1654:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__gesf2>
    1658:	18 16       	cp	r1, r24
    165a:	0c f0       	brlt	.+2      	; 0x165e <main+0x510>
    165c:	20 ce       	rjmp	.-960    	; 0x129e <main+0x150>
			{
				CLEARBIT(PORTB,PUMP);
    165e:	c0 98       	cbi	0x18, 0	; 24
				pumpOnFlag = 0;
    1660:	10 92 04 01 	sts	0x0104, r1
				minPressure_Count = 0;
    1664:	10 92 0b 01 	sts	0x010B, r1
				minPressure_Flag = 0;
    1668:	10 92 0c 01 	sts	0x010C, r1
    166c:	18 ce       	rjmp	.-976    	; 0x129e <main+0x150>

0000166e <__subsf3>:
    166e:	50 58       	subi	r21, 0x80	; 128

00001670 <__addsf3>:
    1670:	bb 27       	eor	r27, r27
    1672:	aa 27       	eor	r26, r26
    1674:	0e d0       	rcall	.+28     	; 0x1692 <__addsf3x>
    1676:	75 c1       	rjmp	.+746    	; 0x1962 <__fp_round>
    1678:	66 d1       	rcall	.+716    	; 0x1946 <__fp_pscA>
    167a:	30 f0       	brcs	.+12     	; 0x1688 <__addsf3+0x18>
    167c:	6b d1       	rcall	.+726    	; 0x1954 <__fp_pscB>
    167e:	20 f0       	brcs	.+8      	; 0x1688 <__addsf3+0x18>
    1680:	31 f4       	brne	.+12     	; 0x168e <__addsf3+0x1e>
    1682:	9f 3f       	cpi	r25, 0xFF	; 255
    1684:	11 f4       	brne	.+4      	; 0x168a <__addsf3+0x1a>
    1686:	1e f4       	brtc	.+6      	; 0x168e <__addsf3+0x1e>
    1688:	5b c1       	rjmp	.+694    	; 0x1940 <__fp_nan>
    168a:	0e f4       	brtc	.+2      	; 0x168e <__addsf3+0x1e>
    168c:	e0 95       	com	r30
    168e:	e7 fb       	bst	r30, 7
    1690:	51 c1       	rjmp	.+674    	; 0x1934 <__fp_inf>

00001692 <__addsf3x>:
    1692:	e9 2f       	mov	r30, r25
    1694:	77 d1       	rcall	.+750    	; 0x1984 <__fp_split3>
    1696:	80 f3       	brcs	.-32     	; 0x1678 <__addsf3+0x8>
    1698:	ba 17       	cp	r27, r26
    169a:	62 07       	cpc	r22, r18
    169c:	73 07       	cpc	r23, r19
    169e:	84 07       	cpc	r24, r20
    16a0:	95 07       	cpc	r25, r21
    16a2:	18 f0       	brcs	.+6      	; 0x16aa <__addsf3x+0x18>
    16a4:	71 f4       	brne	.+28     	; 0x16c2 <__addsf3x+0x30>
    16a6:	9e f5       	brtc	.+102    	; 0x170e <__addsf3x+0x7c>
    16a8:	8f c1       	rjmp	.+798    	; 0x19c8 <__fp_zero>
    16aa:	0e f4       	brtc	.+2      	; 0x16ae <__addsf3x+0x1c>
    16ac:	e0 95       	com	r30
    16ae:	0b 2e       	mov	r0, r27
    16b0:	ba 2f       	mov	r27, r26
    16b2:	a0 2d       	mov	r26, r0
    16b4:	0b 01       	movw	r0, r22
    16b6:	b9 01       	movw	r22, r18
    16b8:	90 01       	movw	r18, r0
    16ba:	0c 01       	movw	r0, r24
    16bc:	ca 01       	movw	r24, r20
    16be:	a0 01       	movw	r20, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	ff 27       	eor	r31, r31
    16c4:	59 1b       	sub	r21, r25
    16c6:	99 f0       	breq	.+38     	; 0x16ee <__addsf3x+0x5c>
    16c8:	59 3f       	cpi	r21, 0xF9	; 249
    16ca:	50 f4       	brcc	.+20     	; 0x16e0 <__addsf3x+0x4e>
    16cc:	50 3e       	cpi	r21, 0xE0	; 224
    16ce:	68 f1       	brcs	.+90     	; 0x172a <__addsf3x+0x98>
    16d0:	1a 16       	cp	r1, r26
    16d2:	f0 40       	sbci	r31, 0x00	; 0
    16d4:	a2 2f       	mov	r26, r18
    16d6:	23 2f       	mov	r18, r19
    16d8:	34 2f       	mov	r19, r20
    16da:	44 27       	eor	r20, r20
    16dc:	58 5f       	subi	r21, 0xF8	; 248
    16de:	f3 cf       	rjmp	.-26     	; 0x16c6 <__addsf3x+0x34>
    16e0:	46 95       	lsr	r20
    16e2:	37 95       	ror	r19
    16e4:	27 95       	ror	r18
    16e6:	a7 95       	ror	r26
    16e8:	f0 40       	sbci	r31, 0x00	; 0
    16ea:	53 95       	inc	r21
    16ec:	c9 f7       	brne	.-14     	; 0x16e0 <__addsf3x+0x4e>
    16ee:	7e f4       	brtc	.+30     	; 0x170e <__addsf3x+0x7c>
    16f0:	1f 16       	cp	r1, r31
    16f2:	ba 0b       	sbc	r27, r26
    16f4:	62 0b       	sbc	r22, r18
    16f6:	73 0b       	sbc	r23, r19
    16f8:	84 0b       	sbc	r24, r20
    16fa:	ba f0       	brmi	.+46     	; 0x172a <__addsf3x+0x98>
    16fc:	91 50       	subi	r25, 0x01	; 1
    16fe:	a1 f0       	breq	.+40     	; 0x1728 <__addsf3x+0x96>
    1700:	ff 0f       	add	r31, r31
    1702:	bb 1f       	adc	r27, r27
    1704:	66 1f       	adc	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	c2 f7       	brpl	.-16     	; 0x16fc <__addsf3x+0x6a>
    170c:	0e c0       	rjmp	.+28     	; 0x172a <__addsf3x+0x98>
    170e:	ba 0f       	add	r27, r26
    1710:	62 1f       	adc	r22, r18
    1712:	73 1f       	adc	r23, r19
    1714:	84 1f       	adc	r24, r20
    1716:	48 f4       	brcc	.+18     	; 0x172a <__addsf3x+0x98>
    1718:	87 95       	ror	r24
    171a:	77 95       	ror	r23
    171c:	67 95       	ror	r22
    171e:	b7 95       	ror	r27
    1720:	f7 95       	ror	r31
    1722:	9e 3f       	cpi	r25, 0xFE	; 254
    1724:	08 f0       	brcs	.+2      	; 0x1728 <__addsf3x+0x96>
    1726:	b3 cf       	rjmp	.-154    	; 0x168e <__addsf3+0x1e>
    1728:	93 95       	inc	r25
    172a:	88 0f       	add	r24, r24
    172c:	08 f0       	brcs	.+2      	; 0x1730 <__addsf3x+0x9e>
    172e:	99 27       	eor	r25, r25
    1730:	ee 0f       	add	r30, r30
    1732:	97 95       	ror	r25
    1734:	87 95       	ror	r24
    1736:	08 95       	ret

00001738 <__cmpsf2>:
    1738:	d9 d0       	rcall	.+434    	; 0x18ec <__fp_cmp>
    173a:	08 f4       	brcc	.+2      	; 0x173e <__cmpsf2+0x6>
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	08 95       	ret

00001740 <__divsf3>:
    1740:	0c d0       	rcall	.+24     	; 0x175a <__divsf3x>
    1742:	0f c1       	rjmp	.+542    	; 0x1962 <__fp_round>
    1744:	07 d1       	rcall	.+526    	; 0x1954 <__fp_pscB>
    1746:	40 f0       	brcs	.+16     	; 0x1758 <__divsf3+0x18>
    1748:	fe d0       	rcall	.+508    	; 0x1946 <__fp_pscA>
    174a:	30 f0       	brcs	.+12     	; 0x1758 <__divsf3+0x18>
    174c:	21 f4       	brne	.+8      	; 0x1756 <__divsf3+0x16>
    174e:	5f 3f       	cpi	r21, 0xFF	; 255
    1750:	19 f0       	breq	.+6      	; 0x1758 <__divsf3+0x18>
    1752:	f0 c0       	rjmp	.+480    	; 0x1934 <__fp_inf>
    1754:	51 11       	cpse	r21, r1
    1756:	39 c1       	rjmp	.+626    	; 0x19ca <__fp_szero>
    1758:	f3 c0       	rjmp	.+486    	; 0x1940 <__fp_nan>

0000175a <__divsf3x>:
    175a:	14 d1       	rcall	.+552    	; 0x1984 <__fp_split3>
    175c:	98 f3       	brcs	.-26     	; 0x1744 <__divsf3+0x4>

0000175e <__divsf3_pse>:
    175e:	99 23       	and	r25, r25
    1760:	c9 f3       	breq	.-14     	; 0x1754 <__divsf3+0x14>
    1762:	55 23       	and	r21, r21
    1764:	b1 f3       	breq	.-20     	; 0x1752 <__divsf3+0x12>
    1766:	95 1b       	sub	r25, r21
    1768:	55 0b       	sbc	r21, r21
    176a:	bb 27       	eor	r27, r27
    176c:	aa 27       	eor	r26, r26
    176e:	62 17       	cp	r22, r18
    1770:	73 07       	cpc	r23, r19
    1772:	84 07       	cpc	r24, r20
    1774:	38 f0       	brcs	.+14     	; 0x1784 <__divsf3_pse+0x26>
    1776:	9f 5f       	subi	r25, 0xFF	; 255
    1778:	5f 4f       	sbci	r21, 0xFF	; 255
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	44 1f       	adc	r20, r20
    1780:	aa 1f       	adc	r26, r26
    1782:	a9 f3       	breq	.-22     	; 0x176e <__divsf3_pse+0x10>
    1784:	33 d0       	rcall	.+102    	; 0x17ec <__divsf3_pse+0x8e>
    1786:	0e 2e       	mov	r0, r30
    1788:	3a f0       	brmi	.+14     	; 0x1798 <__divsf3_pse+0x3a>
    178a:	e0 e8       	ldi	r30, 0x80	; 128
    178c:	30 d0       	rcall	.+96     	; 0x17ee <__divsf3_pse+0x90>
    178e:	91 50       	subi	r25, 0x01	; 1
    1790:	50 40       	sbci	r21, 0x00	; 0
    1792:	e6 95       	lsr	r30
    1794:	00 1c       	adc	r0, r0
    1796:	ca f7       	brpl	.-14     	; 0x178a <__divsf3_pse+0x2c>
    1798:	29 d0       	rcall	.+82     	; 0x17ec <__divsf3_pse+0x8e>
    179a:	fe 2f       	mov	r31, r30
    179c:	27 d0       	rcall	.+78     	; 0x17ec <__divsf3_pse+0x8e>
    179e:	66 0f       	add	r22, r22
    17a0:	77 1f       	adc	r23, r23
    17a2:	88 1f       	adc	r24, r24
    17a4:	bb 1f       	adc	r27, r27
    17a6:	26 17       	cp	r18, r22
    17a8:	37 07       	cpc	r19, r23
    17aa:	48 07       	cpc	r20, r24
    17ac:	ab 07       	cpc	r26, r27
    17ae:	b0 e8       	ldi	r27, 0x80	; 128
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <__divsf3_pse+0x56>
    17b2:	bb 0b       	sbc	r27, r27
    17b4:	80 2d       	mov	r24, r0
    17b6:	bf 01       	movw	r22, r30
    17b8:	ff 27       	eor	r31, r31
    17ba:	93 58       	subi	r25, 0x83	; 131
    17bc:	5f 4f       	sbci	r21, 0xFF	; 255
    17be:	2a f0       	brmi	.+10     	; 0x17ca <__divsf3_pse+0x6c>
    17c0:	9e 3f       	cpi	r25, 0xFE	; 254
    17c2:	51 05       	cpc	r21, r1
    17c4:	68 f0       	brcs	.+26     	; 0x17e0 <__divsf3_pse+0x82>
    17c6:	b6 c0       	rjmp	.+364    	; 0x1934 <__fp_inf>
    17c8:	00 c1       	rjmp	.+512    	; 0x19ca <__fp_szero>
    17ca:	5f 3f       	cpi	r21, 0xFF	; 255
    17cc:	ec f3       	brlt	.-6      	; 0x17c8 <__divsf3_pse+0x6a>
    17ce:	98 3e       	cpi	r25, 0xE8	; 232
    17d0:	dc f3       	brlt	.-10     	; 0x17c8 <__divsf3_pse+0x6a>
    17d2:	86 95       	lsr	r24
    17d4:	77 95       	ror	r23
    17d6:	67 95       	ror	r22
    17d8:	b7 95       	ror	r27
    17da:	f7 95       	ror	r31
    17dc:	9f 5f       	subi	r25, 0xFF	; 255
    17de:	c9 f7       	brne	.-14     	; 0x17d2 <__divsf3_pse+0x74>
    17e0:	88 0f       	add	r24, r24
    17e2:	91 1d       	adc	r25, r1
    17e4:	96 95       	lsr	r25
    17e6:	87 95       	ror	r24
    17e8:	97 f9       	bld	r25, 7
    17ea:	08 95       	ret
    17ec:	e1 e0       	ldi	r30, 0x01	; 1
    17ee:	66 0f       	add	r22, r22
    17f0:	77 1f       	adc	r23, r23
    17f2:	88 1f       	adc	r24, r24
    17f4:	bb 1f       	adc	r27, r27
    17f6:	62 17       	cp	r22, r18
    17f8:	73 07       	cpc	r23, r19
    17fa:	84 07       	cpc	r24, r20
    17fc:	ba 07       	cpc	r27, r26
    17fe:	20 f0       	brcs	.+8      	; 0x1808 <__divsf3_pse+0xaa>
    1800:	62 1b       	sub	r22, r18
    1802:	73 0b       	sbc	r23, r19
    1804:	84 0b       	sbc	r24, r20
    1806:	ba 0b       	sbc	r27, r26
    1808:	ee 1f       	adc	r30, r30
    180a:	88 f7       	brcc	.-30     	; 0x17ee <__divsf3_pse+0x90>
    180c:	e0 95       	com	r30
    180e:	08 95       	ret

00001810 <__fixsfsi>:
    1810:	04 d0       	rcall	.+8      	; 0x181a <__fixunssfsi>
    1812:	68 94       	set
    1814:	b1 11       	cpse	r27, r1
    1816:	d9 c0       	rjmp	.+434    	; 0x19ca <__fp_szero>
    1818:	08 95       	ret

0000181a <__fixunssfsi>:
    181a:	bc d0       	rcall	.+376    	; 0x1994 <__fp_splitA>
    181c:	88 f0       	brcs	.+34     	; 0x1840 <__fixunssfsi+0x26>
    181e:	9f 57       	subi	r25, 0x7F	; 127
    1820:	90 f0       	brcs	.+36     	; 0x1846 <__fixunssfsi+0x2c>
    1822:	b9 2f       	mov	r27, r25
    1824:	99 27       	eor	r25, r25
    1826:	b7 51       	subi	r27, 0x17	; 23
    1828:	a0 f0       	brcs	.+40     	; 0x1852 <__fixunssfsi+0x38>
    182a:	d1 f0       	breq	.+52     	; 0x1860 <__fixunssfsi+0x46>
    182c:	66 0f       	add	r22, r22
    182e:	77 1f       	adc	r23, r23
    1830:	88 1f       	adc	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	1a f0       	brmi	.+6      	; 0x183c <__fixunssfsi+0x22>
    1836:	ba 95       	dec	r27
    1838:	c9 f7       	brne	.-14     	; 0x182c <__fixunssfsi+0x12>
    183a:	12 c0       	rjmp	.+36     	; 0x1860 <__fixunssfsi+0x46>
    183c:	b1 30       	cpi	r27, 0x01	; 1
    183e:	81 f0       	breq	.+32     	; 0x1860 <__fixunssfsi+0x46>
    1840:	c3 d0       	rcall	.+390    	; 0x19c8 <__fp_zero>
    1842:	b1 e0       	ldi	r27, 0x01	; 1
    1844:	08 95       	ret
    1846:	c0 c0       	rjmp	.+384    	; 0x19c8 <__fp_zero>
    1848:	67 2f       	mov	r22, r23
    184a:	78 2f       	mov	r23, r24
    184c:	88 27       	eor	r24, r24
    184e:	b8 5f       	subi	r27, 0xF8	; 248
    1850:	39 f0       	breq	.+14     	; 0x1860 <__fixunssfsi+0x46>
    1852:	b9 3f       	cpi	r27, 0xF9	; 249
    1854:	cc f3       	brlt	.-14     	; 0x1848 <__fixunssfsi+0x2e>
    1856:	86 95       	lsr	r24
    1858:	77 95       	ror	r23
    185a:	67 95       	ror	r22
    185c:	b3 95       	inc	r27
    185e:	d9 f7       	brne	.-10     	; 0x1856 <__fixunssfsi+0x3c>
    1860:	3e f4       	brtc	.+14     	; 0x1870 <__fixunssfsi+0x56>
    1862:	90 95       	com	r25
    1864:	80 95       	com	r24
    1866:	70 95       	com	r23
    1868:	61 95       	neg	r22
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	8f 4f       	sbci	r24, 0xFF	; 255
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
    1870:	08 95       	ret

00001872 <__floatunsisf>:
    1872:	e8 94       	clt
    1874:	09 c0       	rjmp	.+18     	; 0x1888 <__floatsisf+0x12>

00001876 <__floatsisf>:
    1876:	97 fb       	bst	r25, 7
    1878:	3e f4       	brtc	.+14     	; 0x1888 <__floatsisf+0x12>
    187a:	90 95       	com	r25
    187c:	80 95       	com	r24
    187e:	70 95       	com	r23
    1880:	61 95       	neg	r22
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	8f 4f       	sbci	r24, 0xFF	; 255
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	99 23       	and	r25, r25
    188a:	a9 f0       	breq	.+42     	; 0x18b6 <__floatsisf+0x40>
    188c:	f9 2f       	mov	r31, r25
    188e:	96 e9       	ldi	r25, 0x96	; 150
    1890:	bb 27       	eor	r27, r27
    1892:	93 95       	inc	r25
    1894:	f6 95       	lsr	r31
    1896:	87 95       	ror	r24
    1898:	77 95       	ror	r23
    189a:	67 95       	ror	r22
    189c:	b7 95       	ror	r27
    189e:	f1 11       	cpse	r31, r1
    18a0:	f8 cf       	rjmp	.-16     	; 0x1892 <__floatsisf+0x1c>
    18a2:	fa f4       	brpl	.+62     	; 0x18e2 <__floatsisf+0x6c>
    18a4:	bb 0f       	add	r27, r27
    18a6:	11 f4       	brne	.+4      	; 0x18ac <__floatsisf+0x36>
    18a8:	60 ff       	sbrs	r22, 0
    18aa:	1b c0       	rjmp	.+54     	; 0x18e2 <__floatsisf+0x6c>
    18ac:	6f 5f       	subi	r22, 0xFF	; 255
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	16 c0       	rjmp	.+44     	; 0x18e2 <__floatsisf+0x6c>
    18b6:	88 23       	and	r24, r24
    18b8:	11 f0       	breq	.+4      	; 0x18be <__floatsisf+0x48>
    18ba:	96 e9       	ldi	r25, 0x96	; 150
    18bc:	11 c0       	rjmp	.+34     	; 0x18e0 <__floatsisf+0x6a>
    18be:	77 23       	and	r23, r23
    18c0:	21 f0       	breq	.+8      	; 0x18ca <__floatsisf+0x54>
    18c2:	9e e8       	ldi	r25, 0x8E	; 142
    18c4:	87 2f       	mov	r24, r23
    18c6:	76 2f       	mov	r23, r22
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <__floatsisf+0x5e>
    18ca:	66 23       	and	r22, r22
    18cc:	71 f0       	breq	.+28     	; 0x18ea <__floatsisf+0x74>
    18ce:	96 e8       	ldi	r25, 0x86	; 134
    18d0:	86 2f       	mov	r24, r22
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	2a f0       	brmi	.+10     	; 0x18e2 <__floatsisf+0x6c>
    18d8:	9a 95       	dec	r25
    18da:	66 0f       	add	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	88 1f       	adc	r24, r24
    18e0:	da f7       	brpl	.-10     	; 0x18d8 <__floatsisf+0x62>
    18e2:	88 0f       	add	r24, r24
    18e4:	96 95       	lsr	r25
    18e6:	87 95       	ror	r24
    18e8:	97 f9       	bld	r25, 7
    18ea:	08 95       	ret

000018ec <__fp_cmp>:
    18ec:	99 0f       	add	r25, r25
    18ee:	00 08       	sbc	r0, r0
    18f0:	55 0f       	add	r21, r21
    18f2:	aa 0b       	sbc	r26, r26
    18f4:	e0 e8       	ldi	r30, 0x80	; 128
    18f6:	fe ef       	ldi	r31, 0xFE	; 254
    18f8:	16 16       	cp	r1, r22
    18fa:	17 06       	cpc	r1, r23
    18fc:	e8 07       	cpc	r30, r24
    18fe:	f9 07       	cpc	r31, r25
    1900:	c0 f0       	brcs	.+48     	; 0x1932 <__fp_cmp+0x46>
    1902:	12 16       	cp	r1, r18
    1904:	13 06       	cpc	r1, r19
    1906:	e4 07       	cpc	r30, r20
    1908:	f5 07       	cpc	r31, r21
    190a:	98 f0       	brcs	.+38     	; 0x1932 <__fp_cmp+0x46>
    190c:	62 1b       	sub	r22, r18
    190e:	73 0b       	sbc	r23, r19
    1910:	84 0b       	sbc	r24, r20
    1912:	95 0b       	sbc	r25, r21
    1914:	39 f4       	brne	.+14     	; 0x1924 <__fp_cmp+0x38>
    1916:	0a 26       	eor	r0, r26
    1918:	61 f0       	breq	.+24     	; 0x1932 <__fp_cmp+0x46>
    191a:	23 2b       	or	r18, r19
    191c:	24 2b       	or	r18, r20
    191e:	25 2b       	or	r18, r21
    1920:	21 f4       	brne	.+8      	; 0x192a <__fp_cmp+0x3e>
    1922:	08 95       	ret
    1924:	0a 26       	eor	r0, r26
    1926:	09 f4       	brne	.+2      	; 0x192a <__fp_cmp+0x3e>
    1928:	a1 40       	sbci	r26, 0x01	; 1
    192a:	a6 95       	lsr	r26
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	81 1d       	adc	r24, r1
    1930:	81 1d       	adc	r24, r1
    1932:	08 95       	ret

00001934 <__fp_inf>:
    1934:	97 f9       	bld	r25, 7
    1936:	9f 67       	ori	r25, 0x7F	; 127
    1938:	80 e8       	ldi	r24, 0x80	; 128
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	08 95       	ret

00001940 <__fp_nan>:
    1940:	9f ef       	ldi	r25, 0xFF	; 255
    1942:	80 ec       	ldi	r24, 0xC0	; 192
    1944:	08 95       	ret

00001946 <__fp_pscA>:
    1946:	00 24       	eor	r0, r0
    1948:	0a 94       	dec	r0
    194a:	16 16       	cp	r1, r22
    194c:	17 06       	cpc	r1, r23
    194e:	18 06       	cpc	r1, r24
    1950:	09 06       	cpc	r0, r25
    1952:	08 95       	ret

00001954 <__fp_pscB>:
    1954:	00 24       	eor	r0, r0
    1956:	0a 94       	dec	r0
    1958:	12 16       	cp	r1, r18
    195a:	13 06       	cpc	r1, r19
    195c:	14 06       	cpc	r1, r20
    195e:	05 06       	cpc	r0, r21
    1960:	08 95       	ret

00001962 <__fp_round>:
    1962:	09 2e       	mov	r0, r25
    1964:	03 94       	inc	r0
    1966:	00 0c       	add	r0, r0
    1968:	11 f4       	brne	.+4      	; 0x196e <__fp_round+0xc>
    196a:	88 23       	and	r24, r24
    196c:	52 f0       	brmi	.+20     	; 0x1982 <__fp_round+0x20>
    196e:	bb 0f       	add	r27, r27
    1970:	40 f4       	brcc	.+16     	; 0x1982 <__fp_round+0x20>
    1972:	bf 2b       	or	r27, r31
    1974:	11 f4       	brne	.+4      	; 0x197a <__fp_round+0x18>
    1976:	60 ff       	sbrs	r22, 0
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <__fp_round+0x20>
    197a:	6f 5f       	subi	r22, 0xFF	; 255
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	8f 4f       	sbci	r24, 0xFF	; 255
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
    1982:	08 95       	ret

00001984 <__fp_split3>:
    1984:	57 fd       	sbrc	r21, 7
    1986:	90 58       	subi	r25, 0x80	; 128
    1988:	44 0f       	add	r20, r20
    198a:	55 1f       	adc	r21, r21
    198c:	59 f0       	breq	.+22     	; 0x19a4 <__fp_splitA+0x10>
    198e:	5f 3f       	cpi	r21, 0xFF	; 255
    1990:	71 f0       	breq	.+28     	; 0x19ae <__fp_splitA+0x1a>
    1992:	47 95       	ror	r20

00001994 <__fp_splitA>:
    1994:	88 0f       	add	r24, r24
    1996:	97 fb       	bst	r25, 7
    1998:	99 1f       	adc	r25, r25
    199a:	61 f0       	breq	.+24     	; 0x19b4 <__fp_splitA+0x20>
    199c:	9f 3f       	cpi	r25, 0xFF	; 255
    199e:	79 f0       	breq	.+30     	; 0x19be <__fp_splitA+0x2a>
    19a0:	87 95       	ror	r24
    19a2:	08 95       	ret
    19a4:	12 16       	cp	r1, r18
    19a6:	13 06       	cpc	r1, r19
    19a8:	14 06       	cpc	r1, r20
    19aa:	55 1f       	adc	r21, r21
    19ac:	f2 cf       	rjmp	.-28     	; 0x1992 <__fp_split3+0xe>
    19ae:	46 95       	lsr	r20
    19b0:	f1 df       	rcall	.-30     	; 0x1994 <__fp_splitA>
    19b2:	08 c0       	rjmp	.+16     	; 0x19c4 <__fp_splitA+0x30>
    19b4:	16 16       	cp	r1, r22
    19b6:	17 06       	cpc	r1, r23
    19b8:	18 06       	cpc	r1, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	f1 cf       	rjmp	.-30     	; 0x19a0 <__fp_splitA+0xc>
    19be:	86 95       	lsr	r24
    19c0:	71 05       	cpc	r23, r1
    19c2:	61 05       	cpc	r22, r1
    19c4:	08 94       	sec
    19c6:	08 95       	ret

000019c8 <__fp_zero>:
    19c8:	e8 94       	clt

000019ca <__fp_szero>:
    19ca:	bb 27       	eor	r27, r27
    19cc:	66 27       	eor	r22, r22
    19ce:	77 27       	eor	r23, r23
    19d0:	cb 01       	movw	r24, r22
    19d2:	97 f9       	bld	r25, 7
    19d4:	08 95       	ret

000019d6 <__gesf2>:
    19d6:	8a df       	rcall	.-236    	; 0x18ec <__fp_cmp>
    19d8:	08 f4       	brcc	.+2      	; 0x19dc <__gesf2+0x6>
    19da:	8f ef       	ldi	r24, 0xFF	; 255
    19dc:	08 95       	ret

000019de <__mulsf3>:
    19de:	0b d0       	rcall	.+22     	; 0x19f6 <__mulsf3x>
    19e0:	c0 cf       	rjmp	.-128    	; 0x1962 <__fp_round>
    19e2:	b1 df       	rcall	.-158    	; 0x1946 <__fp_pscA>
    19e4:	28 f0       	brcs	.+10     	; 0x19f0 <__mulsf3+0x12>
    19e6:	b6 df       	rcall	.-148    	; 0x1954 <__fp_pscB>
    19e8:	18 f0       	brcs	.+6      	; 0x19f0 <__mulsf3+0x12>
    19ea:	95 23       	and	r25, r21
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <__mulsf3+0x12>
    19ee:	a2 cf       	rjmp	.-188    	; 0x1934 <__fp_inf>
    19f0:	a7 cf       	rjmp	.-178    	; 0x1940 <__fp_nan>
    19f2:	11 24       	eor	r1, r1
    19f4:	ea cf       	rjmp	.-44     	; 0x19ca <__fp_szero>

000019f6 <__mulsf3x>:
    19f6:	c6 df       	rcall	.-116    	; 0x1984 <__fp_split3>
    19f8:	a0 f3       	brcs	.-24     	; 0x19e2 <__mulsf3+0x4>

000019fa <__mulsf3_pse>:
    19fa:	95 9f       	mul	r25, r21
    19fc:	d1 f3       	breq	.-12     	; 0x19f2 <__mulsf3+0x14>
    19fe:	95 0f       	add	r25, r21
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	55 1f       	adc	r21, r21
    1a04:	62 9f       	mul	r22, r18
    1a06:	f0 01       	movw	r30, r0
    1a08:	72 9f       	mul	r23, r18
    1a0a:	bb 27       	eor	r27, r27
    1a0c:	f0 0d       	add	r31, r0
    1a0e:	b1 1d       	adc	r27, r1
    1a10:	63 9f       	mul	r22, r19
    1a12:	aa 27       	eor	r26, r26
    1a14:	f0 0d       	add	r31, r0
    1a16:	b1 1d       	adc	r27, r1
    1a18:	aa 1f       	adc	r26, r26
    1a1a:	64 9f       	mul	r22, r20
    1a1c:	66 27       	eor	r22, r22
    1a1e:	b0 0d       	add	r27, r0
    1a20:	a1 1d       	adc	r26, r1
    1a22:	66 1f       	adc	r22, r22
    1a24:	82 9f       	mul	r24, r18
    1a26:	22 27       	eor	r18, r18
    1a28:	b0 0d       	add	r27, r0
    1a2a:	a1 1d       	adc	r26, r1
    1a2c:	62 1f       	adc	r22, r18
    1a2e:	73 9f       	mul	r23, r19
    1a30:	b0 0d       	add	r27, r0
    1a32:	a1 1d       	adc	r26, r1
    1a34:	62 1f       	adc	r22, r18
    1a36:	83 9f       	mul	r24, r19
    1a38:	a0 0d       	add	r26, r0
    1a3a:	61 1d       	adc	r22, r1
    1a3c:	22 1f       	adc	r18, r18
    1a3e:	74 9f       	mul	r23, r20
    1a40:	33 27       	eor	r19, r19
    1a42:	a0 0d       	add	r26, r0
    1a44:	61 1d       	adc	r22, r1
    1a46:	23 1f       	adc	r18, r19
    1a48:	84 9f       	mul	r24, r20
    1a4a:	60 0d       	add	r22, r0
    1a4c:	21 1d       	adc	r18, r1
    1a4e:	82 2f       	mov	r24, r18
    1a50:	76 2f       	mov	r23, r22
    1a52:	6a 2f       	mov	r22, r26
    1a54:	11 24       	eor	r1, r1
    1a56:	9f 57       	subi	r25, 0x7F	; 127
    1a58:	50 40       	sbci	r21, 0x00	; 0
    1a5a:	8a f0       	brmi	.+34     	; 0x1a7e <__mulsf3_pse+0x84>
    1a5c:	e1 f0       	breq	.+56     	; 0x1a96 <__mulsf3_pse+0x9c>
    1a5e:	88 23       	and	r24, r24
    1a60:	4a f0       	brmi	.+18     	; 0x1a74 <__mulsf3_pse+0x7a>
    1a62:	ee 0f       	add	r30, r30
    1a64:	ff 1f       	adc	r31, r31
    1a66:	bb 1f       	adc	r27, r27
    1a68:	66 1f       	adc	r22, r22
    1a6a:	77 1f       	adc	r23, r23
    1a6c:	88 1f       	adc	r24, r24
    1a6e:	91 50       	subi	r25, 0x01	; 1
    1a70:	50 40       	sbci	r21, 0x00	; 0
    1a72:	a9 f7       	brne	.-22     	; 0x1a5e <__mulsf3_pse+0x64>
    1a74:	9e 3f       	cpi	r25, 0xFE	; 254
    1a76:	51 05       	cpc	r21, r1
    1a78:	70 f0       	brcs	.+28     	; 0x1a96 <__mulsf3_pse+0x9c>
    1a7a:	5c cf       	rjmp	.-328    	; 0x1934 <__fp_inf>
    1a7c:	a6 cf       	rjmp	.-180    	; 0x19ca <__fp_szero>
    1a7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a80:	ec f3       	brlt	.-6      	; 0x1a7c <__mulsf3_pse+0x82>
    1a82:	98 3e       	cpi	r25, 0xE8	; 232
    1a84:	dc f3       	brlt	.-10     	; 0x1a7c <__mulsf3_pse+0x82>
    1a86:	86 95       	lsr	r24
    1a88:	77 95       	ror	r23
    1a8a:	67 95       	ror	r22
    1a8c:	b7 95       	ror	r27
    1a8e:	f7 95       	ror	r31
    1a90:	e7 95       	ror	r30
    1a92:	9f 5f       	subi	r25, 0xFF	; 255
    1a94:	c1 f7       	brne	.-16     	; 0x1a86 <__mulsf3_pse+0x8c>
    1a96:	fe 2b       	or	r31, r30
    1a98:	88 0f       	add	r24, r24
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	96 95       	lsr	r25
    1a9e:	87 95       	ror	r24
    1aa0:	97 f9       	bld	r25, 7
    1aa2:	08 95       	ret

00001aa4 <__divmodhi4>:
    1aa4:	97 fb       	bst	r25, 7
    1aa6:	07 2e       	mov	r0, r23
    1aa8:	16 f4       	brtc	.+4      	; 0x1aae <__divmodhi4+0xa>
    1aaa:	00 94       	com	r0
    1aac:	07 d0       	rcall	.+14     	; 0x1abc <__divmodhi4_neg1>
    1aae:	77 fd       	sbrc	r23, 7
    1ab0:	09 d0       	rcall	.+18     	; 0x1ac4 <__divmodhi4_neg2>
    1ab2:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__udivmodhi4>
    1ab6:	07 fc       	sbrc	r0, 7
    1ab8:	05 d0       	rcall	.+10     	; 0x1ac4 <__divmodhi4_neg2>
    1aba:	3e f4       	brtc	.+14     	; 0x1aca <__divmodhi4_exit>

00001abc <__divmodhi4_neg1>:
    1abc:	90 95       	com	r25
    1abe:	81 95       	neg	r24
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	08 95       	ret

00001ac4 <__divmodhi4_neg2>:
    1ac4:	70 95       	com	r23
    1ac6:	61 95       	neg	r22
    1ac8:	7f 4f       	sbci	r23, 0xFF	; 255

00001aca <__divmodhi4_exit>:
    1aca:	08 95       	ret

00001acc <__umulhisi3>:
    1acc:	a2 9f       	mul	r26, r18
    1ace:	b0 01       	movw	r22, r0
    1ad0:	b3 9f       	mul	r27, r19
    1ad2:	c0 01       	movw	r24, r0
    1ad4:	a3 9f       	mul	r26, r19
    1ad6:	01 d0       	rcall	.+2      	; 0x1ada <__umulhisi3+0xe>
    1ad8:	b2 9f       	mul	r27, r18
    1ada:	70 0d       	add	r23, r0
    1adc:	81 1d       	adc	r24, r1
    1ade:	11 24       	eor	r1, r1
    1ae0:	91 1d       	adc	r25, r1
    1ae2:	08 95       	ret

00001ae4 <__udivmodhi4>:
    1ae4:	aa 1b       	sub	r26, r26
    1ae6:	bb 1b       	sub	r27, r27
    1ae8:	51 e1       	ldi	r21, 0x11	; 17
    1aea:	07 c0       	rjmp	.+14     	; 0x1afa <__udivmodhi4_ep>

00001aec <__udivmodhi4_loop>:
    1aec:	aa 1f       	adc	r26, r26
    1aee:	bb 1f       	adc	r27, r27
    1af0:	a6 17       	cp	r26, r22
    1af2:	b7 07       	cpc	r27, r23
    1af4:	10 f0       	brcs	.+4      	; 0x1afa <__udivmodhi4_ep>
    1af6:	a6 1b       	sub	r26, r22
    1af8:	b7 0b       	sbc	r27, r23

00001afa <__udivmodhi4_ep>:
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	5a 95       	dec	r21
    1b00:	a9 f7       	brne	.-22     	; 0x1aec <__udivmodhi4_loop>
    1b02:	80 95       	com	r24
    1b04:	90 95       	com	r25
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	08 95       	ret

00001b0c <__eerd_byte_m16a>:
    1b0c:	e1 99       	sbic	0x1c, 1	; 28
    1b0e:	fe cf       	rjmp	.-4      	; 0x1b0c <__eerd_byte_m16a>
    1b10:	9f bb       	out	0x1f, r25	; 31
    1b12:	8e bb       	out	0x1e, r24	; 30
    1b14:	e0 9a       	sbi	0x1c, 0	; 28
    1b16:	99 27       	eor	r25, r25
    1b18:	8d b3       	in	r24, 0x1d	; 29
    1b1a:	08 95       	ret

00001b1c <__eerd_dword_m16a>:
    1b1c:	a6 e1       	ldi	r26, 0x16	; 22
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	44 e0       	ldi	r20, 0x04	; 4
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__eerd_blraw_m16a>

00001b28 <__eerd_word_m16a>:
    1b28:	a8 e1       	ldi	r26, 0x18	; 24
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	42 e0       	ldi	r20, 0x02	; 2
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__eerd_blraw_m16a>

00001b34 <__eeupd_byte_m16a>:
    1b34:	26 2f       	mov	r18, r22

00001b36 <__eeupd_r18_m16a>:
    1b36:	e1 99       	sbic	0x1c, 1	; 28
    1b38:	fe cf       	rjmp	.-4      	; 0x1b36 <__eeupd_r18_m16a>
    1b3a:	9f bb       	out	0x1f, r25	; 31
    1b3c:	8e bb       	out	0x1e, r24	; 30
    1b3e:	e0 9a       	sbi	0x1c, 0	; 28
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	0d b2       	in	r0, 0x1d	; 29
    1b44:	02 16       	cp	r0, r18
    1b46:	31 f0       	breq	.+12     	; 0x1b54 <__eeupd_r18_m16a+0x1e>
    1b48:	2d bb       	out	0x1d, r18	; 29
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	e2 9a       	sbi	0x1c, 2	; 28
    1b50:	e1 9a       	sbi	0x1c, 1	; 28
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	08 95       	ret

00001b56 <__eeupd_dword_m16a>:
    1b56:	03 96       	adiw	r24, 0x03	; 3
    1b58:	27 2f       	mov	r18, r23
    1b5a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__eeupd_r18_m16a>
    1b5e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__eeupd_byte_m16a>
    1b62:	25 2f       	mov	r18, r21
    1b64:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__eeupd_r18_m16a>
    1b68:	24 2f       	mov	r18, r20
    1b6a:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__eeupd_r18_m16a>

00001b6e <__eeupd_word_m16a>:
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	27 2f       	mov	r18, r23
    1b72:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__eeupd_r18_m16a>
    1b76:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__eeupd_byte_m16a>

00001b7a <__eerd_block_m16a>:
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22

00001b7e <__eerd_blraw_m16a>:
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e1 99       	sbic	0x1c, 1	; 28
    1b82:	fe cf       	rjmp	.-4      	; 0x1b80 <__eerd_blraw_m16a+0x2>
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <__eerd_blraw_m16a+0x14>
    1b86:	ff bb       	out	0x1f, r31	; 31
    1b88:	ee bb       	out	0x1e, r30	; 30
    1b8a:	e0 9a       	sbi	0x1c, 0	; 28
    1b8c:	31 96       	adiw	r30, 0x01	; 1
    1b8e:	0d b2       	in	r0, 0x1d	; 29
    1b90:	0d 92       	st	X+, r0
    1b92:	41 50       	subi	r20, 0x01	; 1
    1b94:	50 40       	sbci	r21, 0x00	; 0
    1b96:	b8 f7       	brcc	.-18     	; 0x1b86 <__eerd_blraw_m16a+0x8>
    1b98:	08 95       	ret

00001b9a <_exit>:
    1b9a:	f8 94       	cli

00001b9c <__stop_program>:
    1b9c:	ff cf       	rjmp	.-2      	; 0x1b9c <__stop_program>
